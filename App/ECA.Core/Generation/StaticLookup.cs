using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ECA.Core.Generation
{
    /// <summary>
    /// A StaticLookup is a class that is used to contain lookup values of an entity.
    /// </summary>
    public sealed class StaticLookup
    {
        /// <summary>
        /// Creates a new StaticLookup.  This is usually generated by template code.
        /// </summary>
        /// <param name="value">The value of the lookup i.e. friendly name.</param>
        /// <param name="id">The id of the lookup.</param>
        public StaticLookup(string value, int id)
        {
            this.Value = value;
            this.Id = id;
        }

        /// <summary>
        /// Gets the value of the lookup i.e. the friendly name.
        /// </summary>
        public string Value { get; private set; }

        /// <summary>
        /// Gets the Id of the lookup value.
        /// </summary>
        public int Id { get; private set; }


        /// <summary>
        /// Returns true if the given object equals this object.
        /// </summary>
        /// <param name="obj">The object to test.</param>
        /// <returns>True if the given object equals this object.</returns>
        public override bool Equals(object obj)
        {
            if (obj == null)
            {
                return false;
            }
            var otherType = obj as StaticLookup;
            if (otherType == null)
            {
                return false;
            }
            return this.Value == otherType.Value;

        }

        /// <summary>
        /// Returns a hash of this object.
        /// </summary>
        /// <returns>A hash of this object.</returns>
        public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }

        /// <summary>
        /// Returns true if the given instances are equal.
        /// </summary>
        /// <param name="a">The first instance.</param>
        /// <param name="b">The second instance.</param>
        /// <returns>True if the given instances are equal.</returns>
        public static bool operator ==(StaticLookup a, StaticLookup b)
        {
            if (System.Object.ReferenceEquals(a, b))
            {
                return true;
            }
            if (((object)a == null) || ((object)b == null))
            {
                return false;
            }

            return a.Id == b.Id;
        }

        /// <summary>
        /// Returns false if the given instances are equal.
        /// </summary>
        /// <param name="a">The first instance.</param>
        /// <param name="b">The second instance.</param>
        /// <returns>False if the given instances are equal.</returns>
        public static bool operator !=(StaticLookup a, StaticLookup b)
        {
            return !(a == b);
        }
    }
}
