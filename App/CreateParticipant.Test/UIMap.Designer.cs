// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CreateParticipant.Test
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Verify the fields exist under the Personal Information section of the ADD / Create Participant modal.
        /// </summary>
        public void AssertADDParticipantModal_PersonalInformation()
        {
            #region Variable Declarations
            HtmlDiv uIFIRSTGIVENNAMEssspPane = this.UINewtabInternetExplorWindow.UIHttpsecakmtqaazureweDocument11.UIParticipantFormCustom.UIFIRSTGIVENNAMEssspPane;
            HtmlEdit uIItemEditFIRSTGIVENName = this.UINewtabInternetExplorWindow.UIHttpsecakmtqaazureweDocument11.UIParticipantFormCustom.UIItemEditFIRSTGIVENName;
            HtmlDiv uISURNAMEPRIMARYNAMEPane = this.UINewtabInternetExplorWindow.UIHttpsecakmtqaazureweDocument11.UIParticipantFormCustom.UISURNAMEPRIMARYNAMEPane;
            HtmlEdit uIItemEditSURNAME = this.UINewtabInternetExplorWindow.UIHttpsecakmtqaazureweDocument11.UIParticipantFormCustom.UIItemEditSURNAME;
            HtmlDiv uIGENDERNoneSelectedRePane = this.UINewtabInternetExplorWindow.UIHttpsecakmtqaazureweDocument11.UIParticipantFormCustom.UIGENDERNoneSelectedRePane;
            HtmlButton uINoneSelectedButtonGENDER = this.UINewtabInternetExplorWindow.UIHttpsecakmtqaazureweDocument11.UIParticipantFormCustom.UINoneSelectedButtonGENDER;
            HtmlDiv uIDATEOFBIRTHPane = this.UINewtabInternetExplorWindow.UIHttpsecakmtqaazureweDocument11.UIParticipantFormCustom.UIDATEOFBIRTHPane;
            HtmlEdit uIItemEditDOB = this.UINewtabInternetExplorWindow.UIHttpsecakmtqaazureweDocument11.UIParticipantFormCustom.UIItemEditDOB;
            HtmlDiv uIPLACEOFBIRTHCOUNTRYNPane = this.UINewtabInternetExplorWindow.UIHttpsecakmtqaazureweDocument11.UIParticipantFormCustom.UIPLACEOFBIRTHCOUNTRYNPane;
            HtmlButton uINoneSelectedButtonPOB = this.UINewtabInternetExplorWindow.UIHttpsecakmtqaazureweDocument11.UIParticipantFormCustom.UINoneSelectedButtonPOB;
            HtmlDiv uIPLACEOFBIRTHCITYNonePane = this.UINewtabInternetExplorWindow.UIHttpsecakmtqaazureweDocument11.UIParticipantFormCustom.UIPLACEOFBIRTHCITYNonePane;
            HtmlButton uINoneSelectedButtonPOBCity = this.UINewtabInternetExplorWindow.UIHttpsecakmtqaazureweDocument11.UIParticipantFormCustom.UINoneSelectedButtonPOBCity;
            HtmlDiv uICOUNTRIESOFCITIZENSHPane = this.UINewtabInternetExplorWindow.UIHttpsecakmtqaazureweDocument11.UIParticipantFormCustom.UICOUNTRIESOFCITIZENSHPane;
            HtmlButton uINoneSelectedButtonCOCit = this.UINewtabInternetExplorWindow.UIHttpsecakmtqaazureweDocument11.UIParticipantFormCustom.UINoneSelectedButtonCOCit;
            #endregion

            // Wait for 5 seconds for user delay between actions; Verify that the 'InnerText' property of 'FIRST / GIVEN NAMEss *sp' pane contains 'FIRST / GIVEN NAMEss *sp'
            Playback.Wait(5000);
            StringAssert.Contains(uIFIRSTGIVENNAMEssspPane.InnerText, this.AssertADDParticipantModal_PersonalInformationExpectedValues.UIFIRSTGIVENNAMEssspPaneInnerText, "No FIRST / GIVEN NAMEss *sp pane displayed. ");

            // Verify that the 'ControlType' property of text box contains 'Edit'
            StringAssert.Contains(uIItemEditFIRSTGIVENName.ControlType.ToString(), this.AssertADDParticipantModal_PersonalInformationExpectedValues.UIItemEditFIRSTGIVENNameControlType, "No edit available for FIRST / GIVEN NAMESS *SP. Check control type.");

            // Verify that the 'InnerText' property of 'SURNAME / PRIMARY NAME *' pane contains 'SURNAME / PRIMARY NAME *'
            StringAssert.Contains(uISURNAMEPRIMARYNAMEPane.InnerText, this.AssertADDParticipantModal_PersonalInformationExpectedValues.UISURNAMEPRIMARYNAMEPaneInnerText, "No SURNAME / PRIMARY NAME * available for display. Check InnerText. ");

            // Verify that the 'DisplayText' property of 'SURNAME / PRIMARY NAME *' pane contains 'SURNAME / PRIMARY NAME *'
            StringAssert.Contains(uISURNAMEPRIMARYNAMEPane.DisplayText, this.AssertADDParticipantModal_PersonalInformationExpectedValues.UISURNAMEPRIMARYNAMEPaneDisplayText, "No display text available ");

            // Verify that the 'ControlType' property of text box contains 'Edit'
            StringAssert.Contains(uIItemEditSURNAME.ControlType.ToString(), this.AssertADDParticipantModal_PersonalInformationExpectedValues.UIItemEditSURNAMEControlType, "SURNAME / PRIMARY NAME edit unavailable");

            // Verify that the 'InnerText' property of 'GENDER * None Selected ↶ Reset' pane contains 'GENDER *
            //None Selected
            //
            //
            //↶  Reset
            //
            //× 
            //  
            //
            //  
            // Female
            //  
            // Male
            //  
            // Not Specified
            //  
            // Other  '
            StringAssert.Contains(uIGENDERNoneSelectedRePane.InnerText, this.AssertADDParticipantModal_PersonalInformationExpectedValues.UIGENDERNoneSelectedRePaneInnerText, "No Gender selections available. ");

            // Verify that the 'ControlType' property of 'None Selected' button contains 'Button'
            StringAssert.Contains(uINoneSelectedButtonGENDER.ControlType.ToString(), this.AssertADDParticipantModal_PersonalInformationExpectedValues.UINoneSelectedButtonGENDERControlType, "No drop down function available for Gender. ");

            // Verify that the 'InnerText' property of 'DATE OF BIRTH *' pane contains 'DATE OF BIRTH *'
            StringAssert.Contains(uIDATEOFBIRTHPane.InnerText, this.AssertADDParticipantModal_PersonalInformationExpectedValues.UIDATEOFBIRTHPaneInnerText, "No DOB field availble. ");

            // Verify that the 'ControlType' property of text box contains 'Edit'
            StringAssert.Contains(uIItemEditDOB.ControlType.ToString(), this.AssertADDParticipantModal_PersonalInformationExpectedValues.UIItemEditDOBControlType, "No edit available for DOB field. ");

            // Verify that the 'InnerText' property of 'PLACE OF BIRTH - COUNTRY * None Selecte' pane contains 'PLACE OF BIRTH - COUNTRY *
            //None Selected
            //
            //
            //↶  Reset
            //
            //× 
            //  
            //
            //  
            // Afghanistan
            //  
            // Aland Islands
            //  
            // Albania
            //  
            // Algeria 
            //  
            // American Samoa
            //  
            // Andorra 
            //  
            // Angola 
            //  
            // Anguilla
            //  
            // Antarctica
            //  
            // Antigua and Barbuda
            //  
            // Argentina
            //  
            // Armenia
            //  
            // Aruba
            //  
            // Australia
            //  
            // Austria
            //  
            // Azerbaijan
            //  
            // Bahamas
            //  
            // Bahrain
            //  
            // Bangladesh
            //  
            // Barbados
            //  
            // Belarus
            //  
            // Belgium
            //  
            // Belize
            //  
            // Benin
            //  
            // Bermuda
            //  
            // Bhutan
            //  
            // Bolivia
            //  
            // Bosnia and Herzegovina
            //  
            // Botswana
            //  
            // Bouvet Island
            //  
            // Brazil
            //  
            // British Indian Ocean Territory
            //  
            // British Virgin Islands
            //  
            // Brunei
            //  
            // Bulgaria
            //  
            // Burkina Faso
            //  
            // Burma
            //  
            // Burundi
            //  
            // Cabo Verde
            //  
            // Cambodia
            //  
            // Cameroon
            //  
            // Canada
            //  
            // Cayman Islands
            //  
            // Central African Republic
            //  
            // Chad
            //  
            // Chile
            //  
            // China
            //  
            // Christmas Island
            //  
            // Cocos (Keeling) Islands
            //  
            // Colombia
            //  
            // Comoros
            //  
            // Cook Islands
            //  
            // Costa Rica
            //  
            // Côte d'Ivoire
            //  
            // Croatia
            //  
            // Cuba
            //  
            // Curacao
            //  
            // Cyprus
            //  
            // Czech Republic
            //  
            // Democratic Republic of the Congo
            //  
            // Denmark
            //  
            // Djibouti
            //  
            // Dominica
            //  
            // Dominican Republic
            //  
            // Ecuador
            //  
            // Egypt
            //  
            // El Salvador
            //  
            // Equatorial Guinea
            //  
            // Eritrea
            //  
            // Estonia
            //  
            // Ethiopia
            //  
            // Falkland Islands (Malvinas)
            //  
            // Faroe Islands
            //  
            // Fiji
            //  
            // Finland
            //  
            // France
            //  
            // French Guiana
            //  
            // French Polynesia
            //  
            // French Southern Territories
            //  
            // Gabon
            //  
            // Gambia
            //  
            // Georgia
            //  
            // Germany
            //  
            // Ghana
            //  
            // Gibraltar
            //  
            // Greece
            //  
            // Greenland
            //  
            // Grenada
            //  
            // Guadeloupe
            //  
            // Guam
            //  
            // Guatemala
            //  
            // Guernsey
            //  
            // Guinea
            //  
            // Guinea-Bissau
            //  
            // Guyana
            //  
            // Haiti
            //  
            // Heard Island and Mcdonald Islands
            //  
            // Holy See (Vatican City State)
            //  
            // Honduras
            //  
            // Hong Kong and Macau
            //  
            // Hungary
            //  
            // Iceland
            //  
            // India
            //  
            // Indonesia
            //  
            // International
            //  
            // Iran
            //  
            // Iraq
            //  
            // Ireland
            //  
            // Isle of Man
            //  
            // Israel
            //  
            // Italy
            //  
            // Jamaica
            //  
            // Japan
            //  
            // Jersey
            //  
            // Jordan
            //  
            // Kazakhstan
            //  
            // Kenya
            //  
            // Kiribati
            //  
            // Korea, Democratic People's Republic of
            //  
            // Korea, Republic of
            //  
            // Kosovo
            //  
            // Kuwait
            //  
            // Kyrgyzstan
            //  
            // Laos People's Democratic Republic
            //  
            // Latvia
            //  
            // Lebanon
            //  
            // Lesotho
            //  
            // Liberia
            //  
            // Libya
            //  
            // Liechtenstein
            //  
            // Lithuania
            //  
            // Luxembourg
            //  
            // Macao, Special Administrative Region of China
            //  
            // Macedonia, The Republic of
            //  
            // Madagascar
            //  
            // Malawi
            //  
            // Malaysia
            //  
            // Maldives
            //  
            // Mali
            //  
            // Malta
            //  
            // Marshall Islands
            //  
            // Martinique
            //  
            // Mauritania
            //  
            // Mauritius
            //  
            // Mayotte
            //  
            // Mexico
            //  
            // Micronesia, Federated States of
            //  
            // Moldova, Republic of
            //  
            // Monaco
            //  
            // Mongolia
            //  
            // Montenegro
            //  
            // Montserrat
            //  
            // Morocco
            //  
            // Mozambique
            //  
            // Namibia
            //  
            // Nauru
            //  
            // Nepal
            //  
            // Netherlands
            //  
            // Netherlands Antilles
            //  
            // New Caledonia
            //  
            // New Zealand
            //  
            // Nicaragua
            //  
            // Niger
            //  
            // Nigeria
            //  
            // Niue
            //  
            // Norfolk Island
            //  
            // Northern Mariana Islands
            //  
            // Norway
            //  
            // Oman
            //  
            // Pakistan
            //  
            // Palau
            //  
            // Palestine, State of
            //  
            // Panama
            //  
            // Papua New Guinea
            //  
            // Paraguay
            //  
            // Peru
            //  
            // Philippines
            //  
            // Pitcairn
            //  
            // Poland
            //  
            // Portugal
            //  
            // Puerto Rico
            //  
            // Qatar
            //  
            // Republic of the Congo
            //  
            // Réunion
            //  
            // Romania
            //  
            // Russia
            //  
            // Rwanda
            //  
            // Saint Helena
            //  
            // Saint Kitts and Nevis
            //  
            // Saint Lucia
            //  
            // Saint Pierre and Miquelon
            //  
            // Saint Vincent and the Grenadines
            //  
            // Saint-Barthélemy
            //  
            // Saint-Martin (French part)
            //  
            // Samoa
            //  
            // San Marino
            //  
            // Sao Tome and Principe
            //  
            // Saudi Arabia
            //  
            // Senegal
            //  
            // Serbia
            //  
            // Seychelles
            //  
            // Sierra Leone
            //  
            // Singapore
            //  
            // Slovakia
            //  
            // Slovenia
            //  
            // Solomon Islands
            //  
            // Somalia
            //  
            // South Africa
            //  
            // South Georgia and the South Sandwich Islands
            //  
            // South Sudan
            //  
            // Spain
            //  
            // Sri Lanka
            //  
            // Sudan
            //  
            // Suriname
            //  
            // Svalbard and Jan Mayen Islands
            //  
            // Swaziland
            //  
            // Sweden
            //  
            // Switzerland
            //  
            // Syrian Arab Republic
            //  
            // Taiwan
            //  
            // Tajikistan
            //  
            // Tanzania, United Republic of
            //  
            // Thailand
            //  
            // Timor-Leste
            //  
            // Togo
            //  
            // Tokelau
            //  
            // Tonga
            //  
            // Trinidad and Tobago
            //  
            // Tunisia
            //  
            // Turkey
            //  
            // Turkmenistan
            //  
            // Turks and Caicos Islands
            //  
            // Tuvalu
            //  
            // Uganda
            //  
            // Ukraine
            //  
            // United Arab Emirates
            //  
            // United Kingdom
            //  
            // United States Minor Outlying Islands
            //  
            // United States of America
            //  
            // Uruguay
            //  
            // Uzbekistan
            //  
            // Vanuatu
            //  
            // Venezuela
            //  
            // Vietnam
            //  
            // Virgin Islands, US
            //  
            // Wallis and Futuna Islands
            //  
            // Western Sahara
            //  
            // Yemen
            //  
            // Zambia
            //  
            // Zimbabwe  '
            StringAssert.Contains(uIPLACEOFBIRTHCOUNTRYNPane.InnerText, this.AssertADDParticipantModal_PersonalInformationExpectedValues.UIPLACEOFBIRTHCOUNTRYNPaneInnerText, "No POB Country selection available. ");

            // Verify that the 'ControlType' property of 'None Selected' button contains 'Button'
            StringAssert.Contains(uINoneSelectedButtonPOB.ControlType.ToString(), this.AssertADDParticipantModal_PersonalInformationExpectedValues.UINoneSelectedButtonPOBControlType, "No drop down available for POB country.");

            // Verify that the 'InnerText' property of 'PLACE OF BIRTH - CITY * None Selected' pane contains 'PLACE OF BIRTH - CITY *
            //None Selected
            //
            //
            //↶  Reset
            //
            //× 
            //  
            //
            //  '
            StringAssert.Contains(uIPLACEOFBIRTHCITYNonePane.InnerText, this.AssertADDParticipantModal_PersonalInformationExpectedValues.UIPLACEOFBIRTHCITYNonePaneInnerText, "POB City unavailable.");

            // Verify that the 'ControlType' property of 'None Selected' button contains 'Button'
            StringAssert.Contains(uINoneSelectedButtonPOBCity.ControlType.ToString(), this.AssertADDParticipantModal_PersonalInformationExpectedValues.UINoneSelectedButtonPOBCityControlType, "Drop down unavailable for POB City. ");

            // Verify that the 'InnerText' property of 'COUNTRIES OF CITIZENSHIP * None Selecte' pane contains 'COUNTRIES OF CITIZENSHIP *
            //None Selected
            //
            //
            //✓  Select All×  Select None↶  Reset
            //
            //× 
            //  
            //
            //  
            // Afghanistan
            //  
            // Aland Islands
            //  
            // Albania
            //  
            // Algeria 
            //  
            // American Samoa
            //  
            // Andorra 
            //  
            // Angola 
            //  
            // Anguilla
            //  
            // Antarctica
            //  
            // Antigua and Barbuda
            //  
            // Argentina
            //  
            // Armenia
            //  
            // Aruba
            //  
            // Australia
            //  
            // Austria
            //  
            // Azerbaijan
            //  
            // Bahamas
            //  
            // Bahrain
            //  
            // Bangladesh
            //  
            // Barbados
            //  
            // Belarus
            //  
            // Belgium
            //  
            // Belize
            //  
            // Benin
            //  
            // Bermuda
            //  
            // Bhutan
            //  
            // Bolivia
            //  
            // Bosnia and Herzegovina
            //  
            // Botswana
            //  
            // Bouvet Island
            //  
            // Brazil
            //  
            // British Indian Ocean Territory
            //  
            // British Virgin Islands
            //  
            // Brunei
            //  
            // Bulgaria
            //  
            // Burkina Faso
            //  
            // Burma
            //  
            // Burundi
            //  
            // Cabo Verde
            //  
            // Cambodia
            //  
            // Cameroon
            //  
            // Canada
            //  
            // Cayman Islands
            //  
            // Central African Republic
            //  
            // Chad
            //  
            // Chile
            //  
            // China
            //  
            // Christmas Island
            //  
            // Cocos (Keeling) Islands
            //  
            // Colombia
            //  
            // Comoros
            //  
            // Cook Islands
            //  
            // Costa Rica
            //  
            // Côte d'Ivoire
            //  
            // Croatia
            //  
            // Cuba
            //  
            // Curacao
            //  
            // Cyprus
            //  
            // Czech Republic
            //  
            // Democratic Republic of the Congo
            //  
            // Denmark
            //  
            // Djibouti
            //  
            // Dominica
            //  
            // Dominican Republic
            //  
            // Ecuador
            //  
            // Egypt
            //  
            // El Salvador
            //  
            // Equatorial Guinea
            //  
            // Eritrea
            //  
            // Estonia
            //  
            // Ethiopia
            //  
            // Falkland Islands (Malvinas)
            //  
            // Faroe Islands
            //  
            // Fiji
            //  
            // Finland
            //  
            // France
            //  
            // French Guiana
            //  
            // French Polynesia
            //  
            // French Southern Territories
            //  
            // Gabon
            //  
            // Gambia
            //  
            // Georgia
            //  
            // Germany
            //  
            // Ghana
            //  
            // Gibraltar
            //  
            // Greece
            //  
            // Greenland
            //  
            // Grenada
            //  
            // Guadeloupe
            //  
            // Guam
            //  
            // Guatemala
            //  
            // Guernsey
            //  
            // Guinea
            //  
            // Guinea-Bissau
            //  
            // Guyana
            //  
            // Haiti
            //  
            // Heard Island and Mcdonald Islands
            //  
            // Holy See (Vatican City State)
            //  
            // Honduras
            //  
            // Hong Kong and Macau
            //  
            // Hungary
            //  
            // Iceland
            //  
            // India
            //  
            // Indonesia
            //  
            // International
            //  
            // Iran
            //  
            // Iraq
            //  
            // Ireland
            //  
            // Isle of Man
            //  
            // Israel
            //  
            // Italy
            //  
            // Jamaica
            //  
            // Japan
            //  
            // Jersey
            //  
            // Jordan
            //  
            // Kazakhstan
            //  
            // Kenya
            //  
            // Kiribati
            //  
            // Korea, Democratic People's Republic of
            //  
            // Korea, Republic of
            //  
            // Kosovo
            //  
            // Kuwait
            //  
            // Kyrgyzstan
            //  
            // Laos People's Democratic Republic
            //  
            // Latvia
            //  
            // Lebanon
            //  
            // Lesotho
            //  
            // Liberia
            //  
            // Libya
            //  
            // Liechtenstein
            //  
            // Lithuania
            //  
            // Luxembourg
            //  
            // Macao, Special Administrative Region of China
            //  
            // Macedonia, The Republic of
            //  
            // Madagascar
            //  
            // Malawi
            //  
            // Malaysia
            //  
            // Maldives
            //  
            // Mali
            //  
            // Malta
            //  
            // Marshall Islands
            //  
            // Martinique
            //  
            // Mauritania
            //  
            // Mauritius
            //  
            // Mayotte
            //  
            // Mexico
            //  
            // Micronesia, Federated States of
            //  
            // Moldova, Republic of
            //  
            // Monaco
            //  
            // Mongolia
            //  
            // Montenegro
            //  
            // Montserrat
            //  
            // Morocco
            //  
            // Mozambique
            //  
            // Namibia
            //  
            // Nauru
            //  
            // Nepal
            //  
            // Netherlands
            //  
            // Netherlands Antilles
            //  
            // New Caledonia
            //  
            // New Zealand
            //  
            // Nicaragua
            //  
            // Niger
            //  
            // Nigeria
            //  
            // Niue
            //  
            // Norfolk Island
            //  
            // Northern Mariana Islands
            //  
            // Norway
            //  
            // Oman
            //  
            // Pakistan
            //  
            // Palau
            //  
            // Palestine, State of
            //  
            // Panama
            //  
            // Papua New Guinea
            //  
            // Paraguay
            //  
            // Peru
            //  
            // Philippines
            //  
            // Pitcairn
            //  
            // Poland
            //  
            // Portugal
            //  
            // Puerto Rico
            //  
            // Qatar
            //  
            // Republic of the Congo
            //  
            // Réunion
            //  
            // Romania
            //  
            // Russia
            //  
            // Rwanda
            //  
            // Saint Helena
            //  
            // Saint Kitts and Nevis
            //  
            // Saint Lucia
            //  
            // Saint Pierre and Miquelon
            //  
            // Saint Vincent and the Grenadines
            //  
            // Saint-Barthélemy
            //  
            // Saint-Martin (French part)
            //  
            // Samoa
            //  
            // San Marino
            //  
            // Sao Tome and Principe
            //  
            // Saudi Arabia
            //  
            // Senegal
            //  
            // Serbia
            //  
            // Seychelles
            //  
            // Sierra Leone
            //  
            // Singapore
            //  
            // Slovakia
            //  
            // Slovenia
            //  
            // Solomon Islands
            //  
            // Somalia
            //  
            // South Africa
            //  
            // South Georgia and the South Sandwich Islands
            //  
            // South Sudan
            //  
            // Spain
            //  
            // Sri Lanka
            //  
            // Sudan
            //  
            // Suriname
            //  
            // Svalbard and Jan Mayen Islands
            //  
            // Swaziland
            //  
            // Sweden
            //  
            // Switzerland
            //  
            // Syrian Arab Republic
            //  
            // Taiwan
            //  
            // Tajikistan
            //  
            // Tanzania, United Republic of
            //  
            // Thailand
            //  
            // Timor-Leste
            //  
            // Togo
            //  
            // Tokelau
            //  
            // Tonga
            //  
            // Trinidad and Tobago
            //  
            // Tunisia
            //  
            // Turkey
            //  
            // Turkmenistan
            //  
            // Turks and Caicos Islands
            //  
            // Tuvalu
            //  
            // Uganda
            //  
            // Ukraine
            //  
            // United Arab Emirates
            //  
            // United Kingdom
            //  
            // United States Minor Outlying Islands
            //  
            // United States of America
            //  
            // Uruguay
            //  
            // Uzbekistan
            //  
            // Vanuatu
            //  
            // Venezuela
            //  
            // Vietnam
            //  
            // Virgin Islands, US
            //  
            // Wallis and Futuna Islands
            //  
            // Western Sahara
            //  
            // Yemen
            //  
            // Zambia
            //  
            // Zimbabwe  '
            StringAssert.Contains(uICOUNTRIESOFCITIZENSHPane.InnerText, this.AssertADDParticipantModal_PersonalInformationExpectedValues.UICOUNTRIESOFCITIZENSHPaneInnerText, "Countries of Citizenship field is unavailable. Check Innertext. ");

            // Verify that the 'ControlType' property of 'None Selected' button contains 'Button'
            StringAssert.Contains(uINoneSelectedButtonCOCit.ControlType.ToString(), this.AssertADDParticipantModal_PersonalInformationExpectedValues.UINoneSelectedButtonCOCitControlType, "Drop down for Countries of Citizenship is unavailable. ");
        }
        
        /// <summary>
        /// Verify the Branches & Projects tab exists and has a functional hyperlink to navigate to the project list for the program.
        /// </summary>
        public void AssertBranches_ProjectsTab()
        {
            #region Variable Declarations
            HtmlHyperlink uIBranchesProjectsHyperlink = this.UINewtabInternetExplorWindow.UIHttpsecakmtqaazureweDocument2.UITopPane.UIBranchesProjectsHyperlink;
            #endregion

            // Verify that the 'InnerText' property of 'Branches & Projects' link contains 'Subprograms & Projects'
            StringAssert.Contains(uIBranchesProjectsHyperlink.InnerText, this.AssertBranches_ProjectsTabExpectedValues.UIBranchesProjectsHyperlinkInnerText, "No innertext of branches and projects tab available.");

            // Verify that the 'ControlType' property of 'Branches & Projects' link contains 'Hyperlink'
            StringAssert.Contains(uIBranchesProjectsHyperlink.ControlType.ToString(), this.AssertBranches_ProjectsTabExpectedValues.UIBranchesProjectsHyperlinkControlType, "No hyperlink available for branches and projects tab . ");
        }
        
        /// <summary>
        /// Verify the content menu button is available to toggle and expand for display.
        /// </summary>
        public void AssertContentMenuButton()
        {
            #region Variable Declarations
            HtmlButton uITogglenavigationButton = this.UINewtabInternetExplorWindow.UIHttpsecakmtqaazureweDocument.UITogglenavigationButton;
            #endregion

            // Verify that the 'ControlType' property of 'Toggle navigation' button equals 'Button'
            Assert.AreEqual(this.AssertContentMenuButtonExpectedValues.UITogglenavigationButtonControlType, uITogglenavigationButton.ControlType.ToString(), "No Content Menu button available. Check ControlType.");
        }
        
        /// <summary>
        /// Verify the individual program (Academic Exchange Programs) is available and can be navigated to via the hyperlink text.
        /// </summary>
        public void AssertIndividualProgram()
        {
            #region Variable Declarations
            HtmlHyperlink uIAcademicExchangeProgHyperlink = this.UINewtabInternetExplorWindow.UIHttpsecakmtqaazureweDocument1.UISortlistPane.UIAcademicExchangeProgHyperlink;
            #endregion

            // Verify that the 'ControlType' property of 'Academic Exchange Programs' link contains 'Hyperlink'
            StringAssert.Contains(uIAcademicExchangeProgHyperlink.ControlType.ToString(), this.AssertIndividualProgramExpectedValues.UIAcademicExchangeProgHyperlinkControlType, "No hyperlink available for individual program (Academic Exchange Programs). ");

            // Verify that the 'InnerText' property of 'Academic Exchange Programs' link contains 'Academic Exchange Programs'
            StringAssert.Contains(uIAcademicExchangeProgHyperlink.InnerText, this.AssertIndividualProgramExpectedValues.UIAcademicExchangeProgHyperlinkInnerText, "No individual program (Academic Exchange Programs) available. check innertext. ");
        }
        
        /// <summary>
        /// Verify (Test Project 1) is available for selection under the Branches and Projects of the current program.
        /// </summary>
        public void AssertIndividualProject()
        {
            #region Variable Declarations
            HtmlHyperlink uITestProject1Hyperlink = this.UINewtabInternetExplorWindow.UIHttpsecakmtqaazureweDocument3.UISortlistPane.UITestProject1Hyperlink;
            #endregion

            // Verify that the 'InnerText' property of 'Test Project 1' link contains 'Test Project 1'
            StringAssert.Contains(uITestProject1Hyperlink.InnerText, this.AssertIndividualProjectExpectedValues.UITestProject1HyperlinkInnerText, "No (Test Project 1) available for selection.");

            // Verify that the 'ControlType' property of 'Test Project 1' link contains 'Hyperlink'
            StringAssert.Contains(uITestProject1Hyperlink.ControlType.ToString(), this.AssertIndividualProjectExpectedValues.UITestProject1HyperlinkControlType, "No hyperlink available for (Test Project 1). ");
        }
        
        /// <summary>
        /// Verify the ADD button is available for selection.
        /// </summary>
        public void AssertParticipantAddButton()
        {
            #region Variable Declarations
            HtmlButton uIADDButton = this.UINewtabInternetExplorWindow.UIHttpsecakmtqaazureweDocument5.UIADDPane.UIADDButton;
            #endregion

            // Verify that the 'ControlType' property of 'ADD' button equals 'Button'
            Assert.AreEqual(this.AssertParticipantAddButtonExpectedValues.UIADDButtonControlType, uIADDButton.ControlType.ToString(), "No button for adding/creating participant available. ");

            // Verify that the 'DisplayText' property of 'ADD' button contains 'ADD'
            StringAssert.Contains(uIADDButton.DisplayText, this.AssertParticipantAddButtonExpectedValues.UIADDButtonDisplayText, "Button text does not match. ");
        }
        
        /// <summary>
        /// Verify the Participant List is available to expand and displays correctly.
        /// </summary>
        public void AssertParticipantList()
        {
            #region Variable Declarations
            HtmlDiv uIParticipantListKeeptPane = this.UINewtabInternetExplorWindow.UIHttpsecakmtqaazureweDocument5.UITopPane.UIParticipantListKeeptPane;
            #endregion

            // Verify that the 'InnerText' property of 'Participant List Keep track of partic' pane contains 'Participant List
            //
            //Keep track of participant data that has been added to this project.
            //
            //Participants: | Last updated '
            StringAssert.Contains(uIParticipantListKeeptPane.InnerText, this.AssertParticipantListExpectedValues.UIParticipantListKeeptPaneInnerText, "Participant List not available for expansion.");

            // Verify that the 'DisplayText' property of 'Participant List Keep track of partic' pane contains 'Participant List
            //
            //Keep track of participant data that has been added to this project.
            //
            //Participants: | Last updated '
            StringAssert.Contains(uIParticipantListKeeptPane.DisplayText, this.AssertParticipantListExpectedValues.UIParticipantListKeeptPaneDisplayText, "Text does not match. Display check. ");
        }
        
        /// <summary>
        /// Verify the Participants tab is available for selection under the individual project and the hyperlink is functional for navigating.
        /// </summary>
        public void AssertParticipantsTab_IndProject()
        {
            #region Variable Declarations
            HtmlHyperlink uIParticipantsHyperlink = this.UINewtabInternetExplorWindow.UIHttpsecakmtqaazureweDocument4.UITopPane.UIParticipantsHyperlink;
            #endregion

            // Wait for 10 seconds for user delay between actions; Verify that the 'InnerText' property of 'Participants' link contains 'Participants'
            Playback.Wait(10000);
            StringAssert.Contains(uIParticipantsHyperlink.InnerText, this.AssertParticipantsTab_IndProjectExpectedValues.UIParticipantsHyperlinkInnerText, "No participants tab available for selection under the individual project. check i" +
                    "nnertext. ");

            // Verify that the 'ControlType' property of 'Participants' link contains 'Hyperlink'
            StringAssert.Contains(uIParticipantsHyperlink.ControlType.ToString(), this.AssertParticipantsTab_IndProjectExpectedValues.UIParticipantsHyperlinkControlType, "No hyperlink available for the participants tab under the project. ");
        }
        
        /// <summary>
        /// Open browser; navigate to QA site; select ECATest user; enter pw; click sign in.
        /// </summary>
        public void LogintoQA_ExistingUser()
        {
            #region Variable Declarations
            HtmlHyperlink uIECATest1statedeptusHyperlink = this.UINewtabInternetExplorWindow.UISignintoECAClientDocument.UIECATest1statedeptusHyperlink;
            HtmlEdit uIPasswordEdit = this.UINewtabInternetExplorWindow.UISignintoECAClientDocument.UIPasswordEdit;
            HtmlSpan uISigninPane = this.UINewtabInternetExplorWindow.UISignintoECAClientDocument.UISigninPane;
            #endregion

            // Go to web page 'https://eca-kmt-qa.azurewebsites.net/' using new browser instance
            this.UINewtabInternetExplorWindow.LaunchUrl(new System.Uri(this.LogintoQA_ExistingUserParams.UINewtabInternetExplorWindowUrl));

            // Double-Click 'ECATest1@statedept.us •••' link
            Mouse.DoubleClick(uIECATest1statedeptusHyperlink, new Point(106, 40));

            // Type '********' in 'Password' text box
            uIPasswordEdit.Password = this.LogintoQA_ExistingUserParams.UIPasswordEditPassword;

            // Click 'Sign in' pane
            Mouse.Click(uISigninPane, new Point(36, 10));
        }
        
        /// <summary>
        /// Refresh/Reload browser window for display.
        /// </summary>
        public void RefreshBrowserWindow()
        {
            #region Variable Declarations
            BrowserWindow uINewtabInternetExplorWindow = this.UINewtabInternetExplorWindow;
            #endregion

            // Perform Refresh on Browser Window
            uINewtabInternetExplorWindow.Refresh();
        }
        
        /// <summary>
        /// Select the Branches & Projects tab to navigate to the Projects list.
        /// </summary>
        public void SelectBranches_ProjectsTab()
        {
            #region Variable Declarations
            HtmlHyperlink uIBranchesProjectsHyperlink = this.UINewtabInternetExplorWindow.UIHttpsecakmtqaazureweDocument2.UITopPane.UIBranchesProjectsHyperlink;
            BrowserWindow uINewtabInternetExplorWindow = this.UINewtabInternetExplorWindow;
            HtmlHyperlink uIBranchesProjectsHyperlink1 = this.UINewtabInternetExplorWindow.UIHttpsecakmtqaazureweDocument11.UITopPane.UIBranchesProjectsHyperlink;
            #endregion

            // Click 'Branches & Projects' link
            Mouse.Click(uIBranchesProjectsHyperlink, new Point(74, 5));

            // Perform Refresh on Browser Window
            uINewtabInternetExplorWindow.Refresh();

            // Click 'Branches & Projects' link
            Mouse.Click(uIBranchesProjectsHyperlink1, new Point(65, 7));
        }
        
        /// <summary>
        /// Toggle the Content Menu button to expand; select the Programs link to navigate to the All Programs page.  Refresh/Reload the page; then reselect for display.
        /// </summary>
        public void SelectContentMenuButton_ProgramsLink()
        {
            #region Variable Declarations
            HtmlButton uITogglenavigationButton = this.UINewtabInternetExplorWindow.UIHttpsecakmtqaazureweDocument.UITogglenavigationButton;
            HtmlHyperlink uIProgramsHyperlink = this.UINewtabInternetExplorWindow.UIHttpsecakmtqaazureweDocument.UICbpspmenus1Custom.UIProgramsHyperlink;
            BrowserWindow uINewtabInternetExplorWindow = this.UINewtabInternetExplorWindow;
            HtmlSpan uIItemPane = this.UINewtabInternetExplorWindow.UIHttpsecakmtqaazureweDocument.UIItemPane;
            #endregion

            // Click 'Toggle navigation' button
            Mouse.Click(uITogglenavigationButton, new Point(22, 14));

            // Click 'Programs' link
            Mouse.Click(uIProgramsHyperlink, new Point(50, 33));

            // Perform Refresh on Browser Window
            uINewtabInternetExplorWindow.Refresh();

            // Click pane
            Mouse.Click(uIItemPane, new Point(11, 0));

            // Click 'Programs' link
            Mouse.Click(uIProgramsHyperlink, new Point(47, 35));
        }
        
        /// <summary>
        /// Select the individual program (Academic Exchange Programs); refresh/reload the page for display.
        /// </summary>
        public void SelectIndividualProgram()
        {
            #region Variable Declarations
            HtmlHyperlink uIAcademicExchangeProgHyperlink = this.UINewtabInternetExplorWindow.UIHttpsecakmtqaazureweDocument1.UISortlistPane.UIAcademicExchangeProgHyperlink;
            BrowserWindow uINewtabInternetExplorWindow = this.UINewtabInternetExplorWindow;
            #endregion

            // Click 'Academic Exchange Programs' link
            Mouse.Click(uIAcademicExchangeProgHyperlink, new Point(167, 14));

            // Perform Refresh on Browser Window
            uINewtabInternetExplorWindow.Refresh();
        }
        
        /// <summary>
        /// Select (Test Project 1) individual project; refresh page for display to load.
        /// </summary>
        public void SelectIndividualProject()
        {
            #region Variable Declarations
            HtmlHyperlink uITestProject1Hyperlink = this.UINewtabInternetExplorWindow.UIHttpsecakmtqaazureweDocument3.UISortlistPane.UITestProject1Hyperlink;
            BrowserWindow uINewtabInternetExplorWindow = this.UINewtabInternetExplorWindow;
            #endregion

            // Click 'Test Project 1' link
            Mouse.Click(uITestProject1Hyperlink, new Point(55, 13));

            // Perform Refresh on Browser Window
            uINewtabInternetExplorWindow.Refresh();
        }
        
        /// <summary>
        /// Select the participant ADD button.
        /// </summary>
        public void SelectParticipantADD()
        {
            #region Variable Declarations
            HtmlButton uIADDButton = this.UINewtabInternetExplorWindow.UIHttpsecakmtqaazureweDocument5.UIADDPane.UIADDButton;
            #endregion

            // Click 'ADD' button
            Mouse.Click(uIADDButton, new Point(43, 18));
        }
        
        /// <summary>
        /// Expands Participant list to allow a Participant Add/Create.
        /// </summary>
        public void SelectParticipantList()
        {
            #region Variable Declarations
            HtmlDiv uIParticipantListKeeptPane = this.UINewtabInternetExplorWindow.UIHttpsecakmtqaazureweDocument5.UITopPane.UIParticipantListKeeptPane;
            #endregion

            // Click 'Participant List Keep track of partic' pane
            Mouse.Click(uIParticipantListKeeptPane, new Point(472, 60));
        }
        
        /// <summary>
        /// Select the Participants tab to navigate to the Participants for the project page.
        /// </summary>
        public void SelectParticipantsTab_IndProject()
        {
            #region Variable Declarations
            HtmlHyperlink uIParticipantsHyperlink = this.UINewtabInternetExplorWindow.UIHttpsecakmtqaazureweDocument4.UITopPane.UIParticipantsHyperlink;
            BrowserWindow uINewtabInternetExplorWindow = this.UINewtabInternetExplorWindow;
            HtmlHyperlink uIParticipantsHyperlink1 = this.UINewtabInternetExplorWindow.UIHttpsecakmtqaazureweDocument4.UITopPane1.UIParticipantsHyperlink;
            #endregion

            // Click 'Participants' link
            Mouse.Click(uIParticipantsHyperlink, new Point(31, 6));

            // Perform Refresh on Browser Window
            uINewtabInternetExplorWindow.Refresh();

            // Click 'Participants' link
            Mouse.Click(uIParticipantsHyperlink1, new Point(33, 8));

            // Type '{F5}' in 'Participants' link
            Keyboard.SendKeys(uIParticipantsHyperlink1, this.SelectParticipantsTab_IndProjectParams.UIParticipantsHyperlinkSendKeys, ModifierKeys.None);
        }
        
        #region Properties
        public virtual AssertADDParticipantModal_PersonalInformationExpectedValues AssertADDParticipantModal_PersonalInformationExpectedValues
        {
            get
            {
                if ((this.mAssertADDParticipantModal_PersonalInformationExpectedValues == null))
                {
                    this.mAssertADDParticipantModal_PersonalInformationExpectedValues = new AssertADDParticipantModal_PersonalInformationExpectedValues();
                }
                return this.mAssertADDParticipantModal_PersonalInformationExpectedValues;
            }
        }
        
        public virtual AssertBranches_ProjectsTabExpectedValues AssertBranches_ProjectsTabExpectedValues
        {
            get
            {
                if ((this.mAssertBranches_ProjectsTabExpectedValues == null))
                {
                    this.mAssertBranches_ProjectsTabExpectedValues = new AssertBranches_ProjectsTabExpectedValues();
                }
                return this.mAssertBranches_ProjectsTabExpectedValues;
            }
        }
        
        public virtual AssertContentMenuButtonExpectedValues AssertContentMenuButtonExpectedValues
        {
            get
            {
                if ((this.mAssertContentMenuButtonExpectedValues == null))
                {
                    this.mAssertContentMenuButtonExpectedValues = new AssertContentMenuButtonExpectedValues();
                }
                return this.mAssertContentMenuButtonExpectedValues;
            }
        }
        
        public virtual AssertIndividualProgramExpectedValues AssertIndividualProgramExpectedValues
        {
            get
            {
                if ((this.mAssertIndividualProgramExpectedValues == null))
                {
                    this.mAssertIndividualProgramExpectedValues = new AssertIndividualProgramExpectedValues();
                }
                return this.mAssertIndividualProgramExpectedValues;
            }
        }
        
        public virtual AssertIndividualProjectExpectedValues AssertIndividualProjectExpectedValues
        {
            get
            {
                if ((this.mAssertIndividualProjectExpectedValues == null))
                {
                    this.mAssertIndividualProjectExpectedValues = new AssertIndividualProjectExpectedValues();
                }
                return this.mAssertIndividualProjectExpectedValues;
            }
        }
        
        public virtual AssertParticipantAddButtonExpectedValues AssertParticipantAddButtonExpectedValues
        {
            get
            {
                if ((this.mAssertParticipantAddButtonExpectedValues == null))
                {
                    this.mAssertParticipantAddButtonExpectedValues = new AssertParticipantAddButtonExpectedValues();
                }
                return this.mAssertParticipantAddButtonExpectedValues;
            }
        }
        
        public virtual AssertParticipantListExpectedValues AssertParticipantListExpectedValues
        {
            get
            {
                if ((this.mAssertParticipantListExpectedValues == null))
                {
                    this.mAssertParticipantListExpectedValues = new AssertParticipantListExpectedValues();
                }
                return this.mAssertParticipantListExpectedValues;
            }
        }
        
        public virtual AssertParticipantsTab_IndProjectExpectedValues AssertParticipantsTab_IndProjectExpectedValues
        {
            get
            {
                if ((this.mAssertParticipantsTab_IndProjectExpectedValues == null))
                {
                    this.mAssertParticipantsTab_IndProjectExpectedValues = new AssertParticipantsTab_IndProjectExpectedValues();
                }
                return this.mAssertParticipantsTab_IndProjectExpectedValues;
            }
        }
        
        public virtual LogintoQA_ExistingUserParams LogintoQA_ExistingUserParams
        {
            get
            {
                if ((this.mLogintoQA_ExistingUserParams == null))
                {
                    this.mLogintoQA_ExistingUserParams = new LogintoQA_ExistingUserParams();
                }
                return this.mLogintoQA_ExistingUserParams;
            }
        }
        
        public virtual SelectParticipantsTab_IndProjectParams SelectParticipantsTab_IndProjectParams
        {
            get
            {
                if ((this.mSelectParticipantsTab_IndProjectParams == null))
                {
                    this.mSelectParticipantsTab_IndProjectParams = new SelectParticipantsTab_IndProjectParams();
                }
                return this.mSelectParticipantsTab_IndProjectParams;
            }
        }
        
        public UINewtabInternetExplorWindow UINewtabInternetExplorWindow
        {
            get
            {
                if ((this.mUINewtabInternetExplorWindow == null))
                {
                    this.mUINewtabInternetExplorWindow = new UINewtabInternetExplorWindow();
                }
                return this.mUINewtabInternetExplorWindow;
            }
        }
        #endregion
        
        #region Fields
        private AssertADDParticipantModal_PersonalInformationExpectedValues mAssertADDParticipantModal_PersonalInformationExpectedValues;
        
        private AssertBranches_ProjectsTabExpectedValues mAssertBranches_ProjectsTabExpectedValues;
        
        private AssertContentMenuButtonExpectedValues mAssertContentMenuButtonExpectedValues;
        
        private AssertIndividualProgramExpectedValues mAssertIndividualProgramExpectedValues;
        
        private AssertIndividualProjectExpectedValues mAssertIndividualProjectExpectedValues;
        
        private AssertParticipantAddButtonExpectedValues mAssertParticipantAddButtonExpectedValues;
        
        private AssertParticipantListExpectedValues mAssertParticipantListExpectedValues;
        
        private AssertParticipantsTab_IndProjectExpectedValues mAssertParticipantsTab_IndProjectExpectedValues;
        
        private LogintoQA_ExistingUserParams mLogintoQA_ExistingUserParams;
        
        private SelectParticipantsTab_IndProjectParams mSelectParticipantsTab_IndProjectParams;
        
        private UINewtabInternetExplorWindow mUINewtabInternetExplorWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertADDParticipantModal_PersonalInformation'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class AssertADDParticipantModal_PersonalInformationExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Wait for 5 seconds for user delay between actions; Verify that the 'InnerText' property of 'FIRST / GIVEN NAMEss *sp' pane contains 'FIRST / GIVEN NAMEss *sp'
        /// </summary>
        public string UIFIRSTGIVENNAMEssspPaneInnerText = "FIRST / GIVEN NAMEss *sp";
        
        /// <summary>
        /// Verify that the 'ControlType' property of text box contains 'Edit'
        /// </summary>
        public string UIItemEditFIRSTGIVENNameControlType = "Edit";
        
        /// <summary>
        /// Verify that the 'InnerText' property of 'SURNAME / PRIMARY NAME *' pane contains 'SURNAME / PRIMARY NAME *'
        /// </summary>
        public string UISURNAMEPRIMARYNAMEPaneInnerText = "SURNAME / PRIMARY NAME *";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of 'SURNAME / PRIMARY NAME *' pane contains 'SURNAME / PRIMARY NAME *'
        /// </summary>
        public string UISURNAMEPRIMARYNAMEPaneDisplayText = "SURNAME / PRIMARY NAME *";
        
        /// <summary>
        /// Verify that the 'ControlType' property of text box contains 'Edit'
        /// </summary>
        public string UIItemEditSURNAMEControlType = "Edit";
        
        /// <summary>
        /// Verify that the 'InnerText' property of 'GENDER * None Selected ↶ Reset' pane contains 'GENDER *
        ///None Selected
        ///
        ///
        ///↶  Reset
        ///
        ///× 
        ///  
        ///
        ///  
        /// Female
        ///  
        /// Male
        ///  
        /// Not Specified
        ///  
        /// Other  '
        /// </summary>
        public string UIGENDERNoneSelectedRePaneInnerText = "GENDER *\r\nNone Selected\r\n\r\n\r\n↶  Reset\r\n\r\n× \r\n  \r\n\r\n  \r\n Female\r\n  \r\n Male\r\n  \r\n N" +
            "ot Specified\r\n  \r\n Other  ";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'None Selected' button contains 'Button'
        /// </summary>
        public string UINoneSelectedButtonGENDERControlType = "Button";
        
        /// <summary>
        /// Verify that the 'InnerText' property of 'DATE OF BIRTH *' pane contains 'DATE OF BIRTH *'
        /// </summary>
        public string UIDATEOFBIRTHPaneInnerText = "DATE OF BIRTH *";
        
        /// <summary>
        /// Verify that the 'ControlType' property of text box contains 'Edit'
        /// </summary>
        public string UIItemEditDOBControlType = "Edit";
        
        /// <summary>
        /// Verify that the 'InnerText' property of 'PLACE OF BIRTH - COUNTRY * None Selecte' pane contains 'PLACE OF BIRTH - COUNTRY *
        ///None Selected
        ///
        ///
        ///↶  Reset
        ///
        ///× 
        ///  
        ///
        ///  
        /// Afghanistan
        ///  
        /// Aland Islands
        ///  
        /// Albania
        ///  
        /// Algeria 
        ///  
        /// American Samoa
        ///  
        /// Andorra 
        ///  
        /// Angola 
        ///  
        /// Anguilla
        ///  
        /// Antarctica
        ///  
        /// Antigua and Barbuda
        ///  
        /// Argentina
        ///  
        /// Armenia
        ///  
        /// Aruba
        ///  
        /// Australia
        ///  
        /// Austria
        ///  
        /// Azerbaijan
        ///  
        /// Bahamas
        ///  
        /// Bahrain
        ///  
        /// Bangladesh
        ///  
        /// Barbados
        ///  
        /// Belarus
        ///  
        /// Belgium
        ///  
        /// Belize
        ///  
        /// Benin
        ///  
        /// Bermuda
        ///  
        /// Bhutan
        ///  
        /// Bolivia
        ///  
        /// Bosnia and Herzegovina
        ///  
        /// Botswana
        ///  
        /// Bouvet Island
        ///  
        /// Brazil
        ///  
        /// British Indian Ocean Territory
        ///  
        /// British Virgin Islands
        ///  
        /// Brunei
        ///  
        /// Bulgaria
        ///  
        /// Burkina Faso
        ///  
        /// Burma
        ///  
        /// Burundi
        ///  
        /// Cabo Verde
        ///  
        /// Cambodia
        ///  
        /// Cameroon
        ///  
        /// Canada
        ///  
        /// Cayman Islands
        ///  
        /// Central African Republic
        ///  
        /// Chad
        ///  
        /// Chile
        ///  
        /// China
        ///  
        /// Christmas Island
        ///  
        /// Cocos (Keeling) Islands
        ///  
        /// Colombia
        ///  
        /// Comoros
        ///  
        /// Cook Islands
        ///  
        /// Costa Rica
        ///  
        /// Côte d'Ivoire
        ///  
        /// Croatia
        ///  
        /// Cuba
        ///  
        /// Curacao
        ///  
        /// Cyprus
        ///  
        /// Czech Republic
        ///  
        /// Democratic Republic of the Congo
        ///  
        /// Denmark
        ///  
        /// Djibouti
        ///  
        /// Dominica
        ///  
        /// Dominican Republic
        ///  
        /// Ecuador
        ///  
        /// Egypt
        ///  
        /// El Salvador
        ///  
        /// Equatorial Guinea
        ///  
        /// Eritrea
        ///  
        /// Estonia
        ///  
        /// Ethiopia
        ///  
        /// Falkland Islands (Malvinas)
        ///  
        /// Faroe Islands
        ///  
        /// Fiji
        ///  
        /// Finland
        ///  
        /// France
        ///  
        /// French Guiana
        ///  
        /// French Polynesia
        ///  
        /// French Southern Territories
        ///  
        /// Gabon
        ///  
        /// Gambia
        ///  
        /// Georgia
        ///  
        /// Germany
        ///  
        /// Ghana
        ///  
        /// Gibraltar
        ///  
        /// Greece
        ///  
        /// Greenland
        ///  
        /// Grenada
        ///  
        /// Guadeloupe
        ///  
        /// Guam
        ///  
        /// Guatemala
        ///  
        /// Guernsey
        ///  
        /// Guinea
        ///  
        /// Guinea-Bissau
        ///  
        /// Guyana
        ///  
        /// Haiti
        ///  
        /// Heard Island and Mcdonald Islands
        ///  
        /// Holy See (Vatican City State)
        ///  
        /// Honduras
        ///  
        /// Hong Kong and Macau
        ///  
        /// Hungary
        ///  
        /// Iceland
        ///  
        /// India
        ///  
        /// Indonesia
        ///  
        /// International
        ///  
        /// Iran
        ///  
        /// Iraq
        ///  
        /// Ireland
        ///  
        /// Isle of Man
        ///  
        /// Israel
        ///  
        /// Italy
        ///  
        /// Jamaica
        ///  
        /// Japan
        ///  
        /// Jersey
        ///  
        /// Jordan
        ///  
        /// Kazakhstan
        ///  
        /// Kenya
        ///  
        /// Kiribati
        ///  
        /// Korea, Democratic People's Republic of
        ///  
        /// Korea, Republic of
        ///  
        /// Kosovo
        ///  
        /// Kuwait
        ///  
        /// Kyrgyzstan
        ///  
        /// Laos People's Democratic Republic
        ///  
        /// Latvia
        ///  
        /// Lebanon
        ///  
        /// Lesotho
        ///  
        /// Liberia
        ///  
        /// Libya
        ///  
        /// Liechtenstein
        ///  
        /// Lithuania
        ///  
        /// Luxembourg
        ///  
        /// Macao, Special Administrative Region of China
        ///  
        /// Macedonia, The Republic of
        ///  
        /// Madagascar
        ///  
        /// Malawi
        ///  
        /// Malaysia
        ///  
        /// Maldives
        ///  
        /// Mali
        ///  
        /// Malta
        ///  
        /// Marshall Islands
        ///  
        /// Martinique
        ///  
        /// Mauritania
        ///  
        /// Mauritius
        ///  
        /// Mayotte
        ///  
        /// Mexico
        ///  
        /// Micronesia, Federated States of
        ///  
        /// Moldova, Republic of
        ///  
        /// Monaco
        ///  
        /// Mongolia
        ///  
        /// Montenegro
        ///  
        /// Montserrat
        ///  
        /// Morocco
        ///  
        /// Mozambique
        ///  
        /// Namibia
        ///  
        /// Nauru
        ///  
        /// Nepal
        ///  
        /// Netherlands
        ///  
        /// Netherlands Antilles
        ///  
        /// New Caledonia
        ///  
        /// New Zealand
        ///  
        /// Nicaragua
        ///  
        /// Niger
        ///  
        /// Nigeria
        ///  
        /// Niue
        ///  
        /// Norfolk Island
        ///  
        /// Northern Mariana Islands
        ///  
        /// Norway
        ///  
        /// Oman
        ///  
        /// Pakistan
        ///  
        /// Palau
        ///  
        /// Palestine, State of
        ///  
        /// Panama
        ///  
        /// Papua New Guinea
        ///  
        /// Paraguay
        ///  
        /// Peru
        ///  
        /// Philippines
        ///  
        /// Pitcairn
        ///  
        /// Poland
        ///  
        /// Portugal
        ///  
        /// Puerto Rico
        ///  
        /// Qatar
        ///  
        /// Republic of the Congo
        ///  
        /// Réunion
        ///  
        /// Romania
        ///  
        /// Russia
        ///  
        /// Rwanda
        ///  
        /// Saint Helena
        ///  
        /// Saint Kitts and Nevis
        ///  
        /// Saint Lucia
        ///  
        /// Saint Pierre and Miquelon
        ///  
        /// Saint Vincent and the Grenadines
        ///  
        /// Saint-Barthélemy
        ///  
        /// Saint-Martin (French part)
        ///  
        /// Samoa
        ///  
        /// San Marino
        ///  
        /// Sao Tome and Principe
        ///  
        /// Saudi Arabia
        ///  
        /// Senegal
        ///  
        /// Serbia
        ///  
        /// Seychelles
        ///  
        /// Sierra Leone
        ///  
        /// Singapore
        ///  
        /// Slovakia
        ///  
        /// Slovenia
        ///  
        /// Solomon Islands
        ///  
        /// Somalia
        ///  
        /// South Africa
        ///  
        /// South Georgia and the South Sandwich Islands
        ///  
        /// South Sudan
        ///  
        /// Spain
        ///  
        /// Sri Lanka
        ///  
        /// Sudan
        ///  
        /// Suriname
        ///  
        /// Svalbard and Jan Mayen Islands
        ///  
        /// Swaziland
        ///  
        /// Sweden
        ///  
        /// Switzerland
        ///  
        /// Syrian Arab Republic
        ///  
        /// Taiwan
        ///  
        /// Tajikistan
        ///  
        /// Tanzania, United Republic of
        ///  
        /// Thailand
        ///  
        /// Timor-Leste
        ///  
        /// Togo
        ///  
        /// Tokelau
        ///  
        /// Tonga
        ///  
        /// Trinidad and Tobago
        ///  
        /// Tunisia
        ///  
        /// Turkey
        ///  
        /// Turkmenistan
        ///  
        /// Turks and Caicos Islands
        ///  
        /// Tuvalu
        ///  
        /// Uganda
        ///  
        /// Ukraine
        ///  
        /// United Arab Emirates
        ///  
        /// United Kingdom
        ///  
        /// United States Minor Outlying Islands
        ///  
        /// United States of America
        ///  
        /// Uruguay
        ///  
        /// Uzbekistan
        ///  
        /// Vanuatu
        ///  
        /// Venezuela
        ///  
        /// Vietnam
        ///  
        /// Virgin Islands, US
        ///  
        /// Wallis and Futuna Islands
        ///  
        /// Western Sahara
        ///  
        /// Yemen
        ///  
        /// Zambia
        ///  
        /// Zimbabwe  '
        /// </summary>
        public string UIPLACEOFBIRTHCOUNTRYNPaneInnerText = "PLACE OF BIRTH - COUNTRY *\r\nNone Selected\r\n\r\n\r\n↶  Reset\r\n\r\n× \r\n  \r\n\r\n  \r\n Afghani" +
            "stan\r\n  \r\n Aland Islands\r\n  \r\n Albania\r\n  \r\n Algeria \r\n  \r\n American Samoa\r\n  \r\n" +
            " Andorra \r\n  \r\n Angola \r\n  \r\n Anguilla\r\n  \r\n Antarctica\r\n  \r\n Antigua and Barbud" +
            "a\r\n  \r\n Argentina\r\n  \r\n Armenia\r\n  \r\n Aruba\r\n  \r\n Australia\r\n  \r\n Austria\r\n  \r\n " +
            "Azerbaijan\r\n  \r\n Bahamas\r\n  \r\n Bahrain\r\n  \r\n Bangladesh\r\n  \r\n Barbados\r\n  \r\n Bel" +
            "arus\r\n  \r\n Belgium\r\n  \r\n Belize\r\n  \r\n Benin\r\n  \r\n Bermuda\r\n  \r\n Bhutan\r\n  \r\n Bol" +
            "ivia\r\n  \r\n Bosnia and Herzegovina\r\n  \r\n Botswana\r\n  \r\n Bouvet Island\r\n  \r\n Brazi" +
            "l\r\n  \r\n British Indian Ocean Territory\r\n  \r\n British Virgin Islands\r\n  \r\n Brunei" +
            "\r\n  \r\n Bulgaria\r\n  \r\n Burkina Faso\r\n  \r\n Burma\r\n  \r\n Burundi\r\n  \r\n Cabo Verde\r\n " +
            " \r\n Cambodia\r\n  \r\n Cameroon\r\n  \r\n Canada\r\n  \r\n Cayman Islands\r\n  \r\n Central Afri" +
            "can Republic\r\n  \r\n Chad\r\n  \r\n Chile\r\n  \r\n China\r\n  \r\n Christmas Island\r\n  \r\n Coc" +
            "os (Keeling) Islands\r\n  \r\n Colombia\r\n  \r\n Comoros\r\n  \r\n Cook Islands\r\n  \r\n Costa" +
            " Rica\r\n  \r\n Côte d\'Ivoire\r\n  \r\n Croatia\r\n  \r\n Cuba\r\n  \r\n Curacao\r\n  \r\n Cyprus\r\n " +
            " \r\n Czech Republic\r\n  \r\n Democratic Republic of the Congo\r\n  \r\n Denmark\r\n  \r\n Dj" +
            "ibouti\r\n  \r\n Dominica\r\n  \r\n Dominican Republic\r\n  \r\n Ecuador\r\n  \r\n Egypt\r\n  \r\n E" +
            "l Salvador\r\n  \r\n Equatorial Guinea\r\n  \r\n Eritrea\r\n  \r\n Estonia\r\n  \r\n Ethiopia\r\n " +
            " \r\n Falkland Islands (Malvinas)\r\n  \r\n Faroe Islands\r\n  \r\n Fiji\r\n  \r\n Finland\r\n  " +
            "\r\n France\r\n  \r\n French Guiana\r\n  \r\n French Polynesia\r\n  \r\n French Southern Terri" +
            "tories\r\n  \r\n Gabon\r\n  \r\n Gambia\r\n  \r\n Georgia\r\n  \r\n Germany\r\n  \r\n Ghana\r\n  \r\n Gi" +
            "braltar\r\n  \r\n Greece\r\n  \r\n Greenland\r\n  \r\n Grenada\r\n  \r\n Guadeloupe\r\n  \r\n Guam\r\n" +
            "  \r\n Guatemala\r\n  \r\n Guernsey\r\n  \r\n Guinea\r\n  \r\n Guinea-Bissau\r\n  \r\n Guyana\r\n  \r" +
            "\n Haiti\r\n  \r\n Heard Island and Mcdonald Islands\r\n  \r\n Holy See (Vatican City Sta" +
            "te)\r\n  \r\n Honduras\r\n  \r\n Hong Kong and Macau\r\n  \r\n Hungary\r\n  \r\n Iceland\r\n  \r\n I" +
            "ndia\r\n  \r\n Indonesia\r\n  \r\n International\r\n  \r\n Iran\r\n  \r\n Iraq\r\n  \r\n Ireland\r\n  " +
            "\r\n Isle of Man\r\n  \r\n Israel\r\n  \r\n Italy\r\n  \r\n Jamaica\r\n  \r\n Japan\r\n  \r\n Jersey\r\n" +
            "  \r\n Jordan\r\n  \r\n Kazakhstan\r\n  \r\n Kenya\r\n  \r\n Kiribati\r\n  \r\n Korea, Democratic " +
            "People\'s Republic of\r\n  \r\n Korea, Republic of\r\n  \r\n Kosovo\r\n  \r\n Kuwait\r\n  \r\n Ky" +
            "rgyzstan\r\n  \r\n Laos People\'s Democratic Republic\r\n  \r\n Latvia\r\n  \r\n Lebanon\r\n  \r" +
            "\n Lesotho\r\n  \r\n Liberia\r\n  \r\n Libya\r\n  \r\n Liechtenstein\r\n  \r\n Lithuania\r\n  \r\n Lu" +
            "xembourg\r\n  \r\n Macao, Special Administrative Region of China\r\n  \r\n Macedonia, Th" +
            "e Republic of\r\n  \r\n Madagascar\r\n  \r\n Malawi\r\n  \r\n Malaysia\r\n  \r\n Maldives\r\n  \r\n " +
            "Mali\r\n  \r\n Malta\r\n  \r\n Marshall Islands\r\n  \r\n Martinique\r\n  \r\n Mauritania\r\n  \r\n " +
            "Mauritius\r\n  \r\n Mayotte\r\n  \r\n Mexico\r\n  \r\n Micronesia, Federated States of\r\n  \r\n" +
            " Moldova, Republic of\r\n  \r\n Monaco\r\n  \r\n Mongolia\r\n  \r\n Montenegro\r\n  \r\n Montser" +
            "rat\r\n  \r\n Morocco\r\n  \r\n Mozambique\r\n  \r\n Namibia\r\n  \r\n Nauru\r\n  \r\n Nepal\r\n  \r\n N" +
            "etherlands\r\n  \r\n Netherlands Antilles\r\n  \r\n New Caledonia\r\n  \r\n New Zealand\r\n  \r" +
            "\n Nicaragua\r\n  \r\n Niger\r\n  \r\n Nigeria\r\n  \r\n Niue\r\n  \r\n Norfolk Island\r\n  \r\n Nort" +
            "hern Mariana Islands\r\n  \r\n Norway\r\n  \r\n Oman\r\n  \r\n Pakistan\r\n  \r\n Palau\r\n  \r\n Pa" +
            "lestine, State of\r\n  \r\n Panama\r\n  \r\n Papua New Guinea\r\n  \r\n Paraguay\r\n  \r\n Peru\r" +
            "\n  \r\n Philippines\r\n  \r\n Pitcairn\r\n  \r\n Poland\r\n  \r\n Portugal\r\n  \r\n Puerto Rico\r\n" +
            "  \r\n Qatar\r\n  \r\n Republic of the Congo\r\n  \r\n Réunion\r\n  \r\n Romania\r\n  \r\n Russia\r" +
            "\n  \r\n Rwanda\r\n  \r\n Saint Helena\r\n  \r\n Saint Kitts and Nevis\r\n  \r\n Saint Lucia\r\n " +
            " \r\n Saint Pierre and Miquelon\r\n  \r\n Saint Vincent and the Grenadines\r\n  \r\n Saint" +
            "-Barthélemy\r\n  \r\n Saint-Martin (French part)\r\n  \r\n Samoa\r\n  \r\n San Marino\r\n  \r\n " +
            "Sao Tome and Principe\r\n  \r\n Saudi Arabia\r\n  \r\n Senegal\r\n  \r\n Serbia\r\n  \r\n Seyche" +
            "lles\r\n  \r\n Sierra Leone\r\n  \r\n Singapore\r\n  \r\n Slovakia\r\n  \r\n Slovenia\r\n  \r\n Solo" +
            "mon Islands\r\n  \r\n Somalia\r\n  \r\n South Africa\r\n  \r\n South Georgia and the South S" +
            "andwich Islands\r\n  \r\n South Sudan\r\n  \r\n Spain\r\n  \r\n Sri Lanka\r\n  \r\n Sudan\r\n  \r\n " +
            "Suriname\r\n  \r\n Svalbard and Jan Mayen Islands\r\n  \r\n Swaziland\r\n  \r\n Sweden\r\n  \r\n" +
            " Switzerland\r\n  \r\n Syrian Arab Republic\r\n  \r\n Taiwan\r\n  \r\n Tajikistan\r\n  \r\n Tanz" +
            "ania, United Republic of\r\n  \r\n Thailand\r\n  \r\n Timor-Leste\r\n  \r\n Togo\r\n  \r\n Tokel" +
            "au\r\n  \r\n Tonga\r\n  \r\n Trinidad and Tobago\r\n  \r\n Tunisia\r\n  \r\n Turkey\r\n  \r\n Turkme" +
            "nistan\r\n  \r\n Turks and Caicos Islands\r\n  \r\n Tuvalu\r\n  \r\n Uganda\r\n  \r\n Ukraine\r\n " +
            " \r\n United Arab Emirates\r\n  \r\n United Kingdom\r\n  \r\n United States Minor Outlying" +
            " Islands\r\n  \r\n United States of America\r\n  \r\n Uruguay\r\n  \r\n Uzbekistan\r\n  \r\n Van" +
            "uatu\r\n  \r\n Venezuela\r\n  \r\n Vietnam\r\n  \r\n Virgin Islands, US\r\n  \r\n Wallis and Fut" +
            "una Islands\r\n  \r\n Western Sahara\r\n  \r\n Yemen\r\n  \r\n Zambia\r\n  \r\n Zimbabwe  ";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'None Selected' button contains 'Button'
        /// </summary>
        public string UINoneSelectedButtonPOBControlType = "Button";
        
        /// <summary>
        /// Verify that the 'InnerText' property of 'PLACE OF BIRTH - CITY * None Selected' pane contains 'PLACE OF BIRTH - CITY *
        ///None Selected
        ///
        ///
        ///↶  Reset
        ///
        ///× 
        ///  
        ///
        ///  '
        /// </summary>
        public string UIPLACEOFBIRTHCITYNonePaneInnerText = "PLACE OF BIRTH - CITY *\r\nNone Selected\r\n\r\n\r\n↶  Reset\r\n\r\n× \r\n  \r\n\r\n  ";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'None Selected' button contains 'Button'
        /// </summary>
        public string UINoneSelectedButtonPOBCityControlType = "Button";
        
        /// <summary>
        /// Verify that the 'InnerText' property of 'COUNTRIES OF CITIZENSHIP * None Selecte' pane contains 'COUNTRIES OF CITIZENSHIP *
        ///None Selected
        ///
        ///
        ///✓  Select All×  Select None↶  Reset
        ///
        ///× 
        ///  
        ///
        ///  
        /// Afghanistan
        ///  
        /// Aland Islands
        ///  
        /// Albania
        ///  
        /// Algeria 
        ///  
        /// American Samoa
        ///  
        /// Andorra 
        ///  
        /// Angola 
        ///  
        /// Anguilla
        ///  
        /// Antarctica
        ///  
        /// Antigua and Barbuda
        ///  
        /// Argentina
        ///  
        /// Armenia
        ///  
        /// Aruba
        ///  
        /// Australia
        ///  
        /// Austria
        ///  
        /// Azerbaijan
        ///  
        /// Bahamas
        ///  
        /// Bahrain
        ///  
        /// Bangladesh
        ///  
        /// Barbados
        ///  
        /// Belarus
        ///  
        /// Belgium
        ///  
        /// Belize
        ///  
        /// Benin
        ///  
        /// Bermuda
        ///  
        /// Bhutan
        ///  
        /// Bolivia
        ///  
        /// Bosnia and Herzegovina
        ///  
        /// Botswana
        ///  
        /// Bouvet Island
        ///  
        /// Brazil
        ///  
        /// British Indian Ocean Territory
        ///  
        /// British Virgin Islands
        ///  
        /// Brunei
        ///  
        /// Bulgaria
        ///  
        /// Burkina Faso
        ///  
        /// Burma
        ///  
        /// Burundi
        ///  
        /// Cabo Verde
        ///  
        /// Cambodia
        ///  
        /// Cameroon
        ///  
        /// Canada
        ///  
        /// Cayman Islands
        ///  
        /// Central African Republic
        ///  
        /// Chad
        ///  
        /// Chile
        ///  
        /// China
        ///  
        /// Christmas Island
        ///  
        /// Cocos (Keeling) Islands
        ///  
        /// Colombia
        ///  
        /// Comoros
        ///  
        /// Cook Islands
        ///  
        /// Costa Rica
        ///  
        /// Côte d'Ivoire
        ///  
        /// Croatia
        ///  
        /// Cuba
        ///  
        /// Curacao
        ///  
        /// Cyprus
        ///  
        /// Czech Republic
        ///  
        /// Democratic Republic of the Congo
        ///  
        /// Denmark
        ///  
        /// Djibouti
        ///  
        /// Dominica
        ///  
        /// Dominican Republic
        ///  
        /// Ecuador
        ///  
        /// Egypt
        ///  
        /// El Salvador
        ///  
        /// Equatorial Guinea
        ///  
        /// Eritrea
        ///  
        /// Estonia
        ///  
        /// Ethiopia
        ///  
        /// Falkland Islands (Malvinas)
        ///  
        /// Faroe Islands
        ///  
        /// Fiji
        ///  
        /// Finland
        ///  
        /// France
        ///  
        /// French Guiana
        ///  
        /// French Polynesia
        ///  
        /// French Southern Territories
        ///  
        /// Gabon
        ///  
        /// Gambia
        ///  
        /// Georgia
        ///  
        /// Germany
        ///  
        /// Ghana
        ///  
        /// Gibraltar
        ///  
        /// Greece
        ///  
        /// Greenland
        ///  
        /// Grenada
        ///  
        /// Guadeloupe
        ///  
        /// Guam
        ///  
        /// Guatemala
        ///  
        /// Guernsey
        ///  
        /// Guinea
        ///  
        /// Guinea-Bissau
        ///  
        /// Guyana
        ///  
        /// Haiti
        ///  
        /// Heard Island and Mcdonald Islands
        ///  
        /// Holy See (Vatican City State)
        ///  
        /// Honduras
        ///  
        /// Hong Kong and Macau
        ///  
        /// Hungary
        ///  
        /// Iceland
        ///  
        /// India
        ///  
        /// Indonesia
        ///  
        /// International
        ///  
        /// Iran
        ///  
        /// Iraq
        ///  
        /// Ireland
        ///  
        /// Isle of Man
        ///  
        /// Israel
        ///  
        /// Italy
        ///  
        /// Jamaica
        ///  
        /// Japan
        ///  
        /// Jersey
        ///  
        /// Jordan
        ///  
        /// Kazakhstan
        ///  
        /// Kenya
        ///  
        /// Kiribati
        ///  
        /// Korea, Democratic People's Republic of
        ///  
        /// Korea, Republic of
        ///  
        /// Kosovo
        ///  
        /// Kuwait
        ///  
        /// Kyrgyzstan
        ///  
        /// Laos People's Democratic Republic
        ///  
        /// Latvia
        ///  
        /// Lebanon
        ///  
        /// Lesotho
        ///  
        /// Liberia
        ///  
        /// Libya
        ///  
        /// Liechtenstein
        ///  
        /// Lithuania
        ///  
        /// Luxembourg
        ///  
        /// Macao, Special Administrative Region of China
        ///  
        /// Macedonia, The Republic of
        ///  
        /// Madagascar
        ///  
        /// Malawi
        ///  
        /// Malaysia
        ///  
        /// Maldives
        ///  
        /// Mali
        ///  
        /// Malta
        ///  
        /// Marshall Islands
        ///  
        /// Martinique
        ///  
        /// Mauritania
        ///  
        /// Mauritius
        ///  
        /// Mayotte
        ///  
        /// Mexico
        ///  
        /// Micronesia, Federated States of
        ///  
        /// Moldova, Republic of
        ///  
        /// Monaco
        ///  
        /// Mongolia
        ///  
        /// Montenegro
        ///  
        /// Montserrat
        ///  
        /// Morocco
        ///  
        /// Mozambique
        ///  
        /// Namibia
        ///  
        /// Nauru
        ///  
        /// Nepal
        ///  
        /// Netherlands
        ///  
        /// Netherlands Antilles
        ///  
        /// New Caledonia
        ///  
        /// New Zealand
        ///  
        /// Nicaragua
        ///  
        /// Niger
        ///  
        /// Nigeria
        ///  
        /// Niue
        ///  
        /// Norfolk Island
        ///  
        /// Northern Mariana Islands
        ///  
        /// Norway
        ///  
        /// Oman
        ///  
        /// Pakistan
        ///  
        /// Palau
        ///  
        /// Palestine, State of
        ///  
        /// Panama
        ///  
        /// Papua New Guinea
        ///  
        /// Paraguay
        ///  
        /// Peru
        ///  
        /// Philippines
        ///  
        /// Pitcairn
        ///  
        /// Poland
        ///  
        /// Portugal
        ///  
        /// Puerto Rico
        ///  
        /// Qatar
        ///  
        /// Republic of the Congo
        ///  
        /// Réunion
        ///  
        /// Romania
        ///  
        /// Russia
        ///  
        /// Rwanda
        ///  
        /// Saint Helena
        ///  
        /// Saint Kitts and Nevis
        ///  
        /// Saint Lucia
        ///  
        /// Saint Pierre and Miquelon
        ///  
        /// Saint Vincent and the Grenadines
        ///  
        /// Saint-Barthélemy
        ///  
        /// Saint-Martin (French part)
        ///  
        /// Samoa
        ///  
        /// San Marino
        ///  
        /// Sao Tome and Principe
        ///  
        /// Saudi Arabia
        ///  
        /// Senegal
        ///  
        /// Serbia
        ///  
        /// Seychelles
        ///  
        /// Sierra Leone
        ///  
        /// Singapore
        ///  
        /// Slovakia
        ///  
        /// Slovenia
        ///  
        /// Solomon Islands
        ///  
        /// Somalia
        ///  
        /// South Africa
        ///  
        /// South Georgia and the South Sandwich Islands
        ///  
        /// South Sudan
        ///  
        /// Spain
        ///  
        /// Sri Lanka
        ///  
        /// Sudan
        ///  
        /// Suriname
        ///  
        /// Svalbard and Jan Mayen Islands
        ///  
        /// Swaziland
        ///  
        /// Sweden
        ///  
        /// Switzerland
        ///  
        /// Syrian Arab Republic
        ///  
        /// Taiwan
        ///  
        /// Tajikistan
        ///  
        /// Tanzania, United Republic of
        ///  
        /// Thailand
        ///  
        /// Timor-Leste
        ///  
        /// Togo
        ///  
        /// Tokelau
        ///  
        /// Tonga
        ///  
        /// Trinidad and Tobago
        ///  
        /// Tunisia
        ///  
        /// Turkey
        ///  
        /// Turkmenistan
        ///  
        /// Turks and Caicos Islands
        ///  
        /// Tuvalu
        ///  
        /// Uganda
        ///  
        /// Ukraine
        ///  
        /// United Arab Emirates
        ///  
        /// United Kingdom
        ///  
        /// United States Minor Outlying Islands
        ///  
        /// United States of America
        ///  
        /// Uruguay
        ///  
        /// Uzbekistan
        ///  
        /// Vanuatu
        ///  
        /// Venezuela
        ///  
        /// Vietnam
        ///  
        /// Virgin Islands, US
        ///  
        /// Wallis and Futuna Islands
        ///  
        /// Western Sahara
        ///  
        /// Yemen
        ///  
        /// Zambia
        ///  
        /// Zimbabwe  '
        /// </summary>
        public string UICOUNTRIESOFCITIZENSHPaneInnerText = "COUNTRIES OF CITIZENSHIP *\r\nNone Selected\r\n\r\n\r\n✓  Select All×  Select None↶  Rese" +
            "t\r\n\r\n× \r\n  \r\n\r\n  \r\n Afghanistan\r\n  \r\n Aland Islands\r\n  \r\n Albania\r\n  \r\n Algeria " +
            "\r\n  \r\n American Samoa\r\n  \r\n Andorra \r\n  \r\n Angola \r\n  \r\n Anguilla\r\n  \r\n Antarcti" +
            "ca\r\n  \r\n Antigua and Barbuda\r\n  \r\n Argentina\r\n  \r\n Armenia\r\n  \r\n Aruba\r\n  \r\n Aus" +
            "tralia\r\n  \r\n Austria\r\n  \r\n Azerbaijan\r\n  \r\n Bahamas\r\n  \r\n Bahrain\r\n  \r\n Banglade" +
            "sh\r\n  \r\n Barbados\r\n  \r\n Belarus\r\n  \r\n Belgium\r\n  \r\n Belize\r\n  \r\n Benin\r\n  \r\n Ber" +
            "muda\r\n  \r\n Bhutan\r\n  \r\n Bolivia\r\n  \r\n Bosnia and Herzegovina\r\n  \r\n Botswana\r\n  \r" +
            "\n Bouvet Island\r\n  \r\n Brazil\r\n  \r\n British Indian Ocean Territory\r\n  \r\n British " +
            "Virgin Islands\r\n  \r\n Brunei\r\n  \r\n Bulgaria\r\n  \r\n Burkina Faso\r\n  \r\n Burma\r\n  \r\n " +
            "Burundi\r\n  \r\n Cabo Verde\r\n  \r\n Cambodia\r\n  \r\n Cameroon\r\n  \r\n Canada\r\n  \r\n Cayman" +
            " Islands\r\n  \r\n Central African Republic\r\n  \r\n Chad\r\n  \r\n Chile\r\n  \r\n China\r\n  \r\n" +
            " Christmas Island\r\n  \r\n Cocos (Keeling) Islands\r\n  \r\n Colombia\r\n  \r\n Comoros\r\n  " +
            "\r\n Cook Islands\r\n  \r\n Costa Rica\r\n  \r\n Côte d\'Ivoire\r\n  \r\n Croatia\r\n  \r\n Cuba\r\n " +
            " \r\n Curacao\r\n  \r\n Cyprus\r\n  \r\n Czech Republic\r\n  \r\n Democratic Republic of the C" +
            "ongo\r\n  \r\n Denmark\r\n  \r\n Djibouti\r\n  \r\n Dominica\r\n  \r\n Dominican Republic\r\n  \r\n " +
            "Ecuador\r\n  \r\n Egypt\r\n  \r\n El Salvador\r\n  \r\n Equatorial Guinea\r\n  \r\n Eritrea\r\n  \r" +
            "\n Estonia\r\n  \r\n Ethiopia\r\n  \r\n Falkland Islands (Malvinas)\r\n  \r\n Faroe Islands\r\n" +
            "  \r\n Fiji\r\n  \r\n Finland\r\n  \r\n France\r\n  \r\n French Guiana\r\n  \r\n French Polynesia\r" +
            "\n  \r\n French Southern Territories\r\n  \r\n Gabon\r\n  \r\n Gambia\r\n  \r\n Georgia\r\n  \r\n G" +
            "ermany\r\n  \r\n Ghana\r\n  \r\n Gibraltar\r\n  \r\n Greece\r\n  \r\n Greenland\r\n  \r\n Grenada\r\n " +
            " \r\n Guadeloupe\r\n  \r\n Guam\r\n  \r\n Guatemala\r\n  \r\n Guernsey\r\n  \r\n Guinea\r\n  \r\n Guin" +
            "ea-Bissau\r\n  \r\n Guyana\r\n  \r\n Haiti\r\n  \r\n Heard Island and Mcdonald Islands\r\n  \r\n" +
            " Holy See (Vatican City State)\r\n  \r\n Honduras\r\n  \r\n Hong Kong and Macau\r\n  \r\n Hu" +
            "ngary\r\n  \r\n Iceland\r\n  \r\n India\r\n  \r\n Indonesia\r\n  \r\n International\r\n  \r\n Iran\r\n" +
            "  \r\n Iraq\r\n  \r\n Ireland\r\n  \r\n Isle of Man\r\n  \r\n Israel\r\n  \r\n Italy\r\n  \r\n Jamaica" +
            "\r\n  \r\n Japan\r\n  \r\n Jersey\r\n  \r\n Jordan\r\n  \r\n Kazakhstan\r\n  \r\n Kenya\r\n  \r\n Kiriba" +
            "ti\r\n  \r\n Korea, Democratic People\'s Republic of\r\n  \r\n Korea, Republic of\r\n  \r\n K" +
            "osovo\r\n  \r\n Kuwait\r\n  \r\n Kyrgyzstan\r\n  \r\n Laos People\'s Democratic Republic\r\n  \r" +
            "\n Latvia\r\n  \r\n Lebanon\r\n  \r\n Lesotho\r\n  \r\n Liberia\r\n  \r\n Libya\r\n  \r\n Liechtenste" +
            "in\r\n  \r\n Lithuania\r\n  \r\n Luxembourg\r\n  \r\n Macao, Special Administrative Region o" +
            "f China\r\n  \r\n Macedonia, The Republic of\r\n  \r\n Madagascar\r\n  \r\n Malawi\r\n  \r\n Mal" +
            "aysia\r\n  \r\n Maldives\r\n  \r\n Mali\r\n  \r\n Malta\r\n  \r\n Marshall Islands\r\n  \r\n Martini" +
            "que\r\n  \r\n Mauritania\r\n  \r\n Mauritius\r\n  \r\n Mayotte\r\n  \r\n Mexico\r\n  \r\n Micronesia" +
            ", Federated States of\r\n  \r\n Moldova, Republic of\r\n  \r\n Monaco\r\n  \r\n Mongolia\r\n  " +
            "\r\n Montenegro\r\n  \r\n Montserrat\r\n  \r\n Morocco\r\n  \r\n Mozambique\r\n  \r\n Namibia\r\n  \r" +
            "\n Nauru\r\n  \r\n Nepal\r\n  \r\n Netherlands\r\n  \r\n Netherlands Antilles\r\n  \r\n New Caled" +
            "onia\r\n  \r\n New Zealand\r\n  \r\n Nicaragua\r\n  \r\n Niger\r\n  \r\n Nigeria\r\n  \r\n Niue\r\n  \r" +
            "\n Norfolk Island\r\n  \r\n Northern Mariana Islands\r\n  \r\n Norway\r\n  \r\n Oman\r\n  \r\n Pa" +
            "kistan\r\n  \r\n Palau\r\n  \r\n Palestine, State of\r\n  \r\n Panama\r\n  \r\n Papua New Guinea" +
            "\r\n  \r\n Paraguay\r\n  \r\n Peru\r\n  \r\n Philippines\r\n  \r\n Pitcairn\r\n  \r\n Poland\r\n  \r\n P" +
            "ortugal\r\n  \r\n Puerto Rico\r\n  \r\n Qatar\r\n  \r\n Republic of the Congo\r\n  \r\n Réunion\r" +
            "\n  \r\n Romania\r\n  \r\n Russia\r\n  \r\n Rwanda\r\n  \r\n Saint Helena\r\n  \r\n Saint Kitts and" +
            " Nevis\r\n  \r\n Saint Lucia\r\n  \r\n Saint Pierre and Miquelon\r\n  \r\n Saint Vincent and" +
            " the Grenadines\r\n  \r\n Saint-Barthélemy\r\n  \r\n Saint-Martin (French part)\r\n  \r\n Sa" +
            "moa\r\n  \r\n San Marino\r\n  \r\n Sao Tome and Principe\r\n  \r\n Saudi Arabia\r\n  \r\n Senega" +
            "l\r\n  \r\n Serbia\r\n  \r\n Seychelles\r\n  \r\n Sierra Leone\r\n  \r\n Singapore\r\n  \r\n Slovaki" +
            "a\r\n  \r\n Slovenia\r\n  \r\n Solomon Islands\r\n  \r\n Somalia\r\n  \r\n South Africa\r\n  \r\n So" +
            "uth Georgia and the South Sandwich Islands\r\n  \r\n South Sudan\r\n  \r\n Spain\r\n  \r\n S" +
            "ri Lanka\r\n  \r\n Sudan\r\n  \r\n Suriname\r\n  \r\n Svalbard and Jan Mayen Islands\r\n  \r\n S" +
            "waziland\r\n  \r\n Sweden\r\n  \r\n Switzerland\r\n  \r\n Syrian Arab Republic\r\n  \r\n Taiwan\r" +
            "\n  \r\n Tajikistan\r\n  \r\n Tanzania, United Republic of\r\n  \r\n Thailand\r\n  \r\n Timor-L" +
            "este\r\n  \r\n Togo\r\n  \r\n Tokelau\r\n  \r\n Tonga\r\n  \r\n Trinidad and Tobago\r\n  \r\n Tunisi" +
            "a\r\n  \r\n Turkey\r\n  \r\n Turkmenistan\r\n  \r\n Turks and Caicos Islands\r\n  \r\n Tuvalu\r\n " +
            " \r\n Uganda\r\n  \r\n Ukraine\r\n  \r\n United Arab Emirates\r\n  \r\n United Kingdom\r\n  \r\n U" +
            "nited States Minor Outlying Islands\r\n  \r\n United States of America\r\n  \r\n Uruguay" +
            "\r\n  \r\n Uzbekistan\r\n  \r\n Vanuatu\r\n  \r\n Venezuela\r\n  \r\n Vietnam\r\n  \r\n Virgin Islan" +
            "ds, US\r\n  \r\n Wallis and Futuna Islands\r\n  \r\n Western Sahara\r\n  \r\n Yemen\r\n  \r\n Za" +
            "mbia\r\n  \r\n Zimbabwe  ";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'None Selected' button contains 'Button'
        /// </summary>
        public string UINoneSelectedButtonCOCitControlType = "Button";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertBranches_ProjectsTab'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class AssertBranches_ProjectsTabExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Branches & Projects' link contains 'Subprograms & Projects'
        /// </summary>
        public string UIBranchesProjectsHyperlinkInnerText = "Subprograms & Projects";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'Branches & Projects' link contains 'Hyperlink'
        /// </summary>
        public string UIBranchesProjectsHyperlinkControlType = "Hyperlink";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertContentMenuButton'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class AssertContentMenuButtonExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'Toggle navigation' button equals 'Button'
        /// </summary>
        public string UITogglenavigationButtonControlType = "Button";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertIndividualProgram'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class AssertIndividualProgramExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'Academic Exchange Programs' link contains 'Hyperlink'
        /// </summary>
        public string UIAcademicExchangeProgHyperlinkControlType = "Hyperlink";
        
        /// <summary>
        /// Verify that the 'InnerText' property of 'Academic Exchange Programs' link contains 'Academic Exchange Programs'
        /// </summary>
        public string UIAcademicExchangeProgHyperlinkInnerText = "Academic Exchange Programs";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertIndividualProject'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class AssertIndividualProjectExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Test Project 1' link contains 'Test Project 1'
        /// </summary>
        public string UITestProject1HyperlinkInnerText = "Test Project 1";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'Test Project 1' link contains 'Hyperlink'
        /// </summary>
        public string UITestProject1HyperlinkControlType = "Hyperlink";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertParticipantAddButton'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class AssertParticipantAddButtonExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'ADD' button equals 'Button'
        /// </summary>
        public string UIADDButtonControlType = "Button";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of 'ADD' button contains 'ADD'
        /// </summary>
        public string UIADDButtonDisplayText = "ADD";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertParticipantList'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class AssertParticipantListExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Participant List Keep track of partic' pane contains 'Participant List
        ///
        ///Keep track of participant data that has been added to this project.
        ///
        ///Participants: | Last updated '
        /// </summary>
        public string UIParticipantListKeeptPaneInnerText = "Participant List\r\n\r\nKeep track of participant data that has been added to this pr" +
            "oject.\r\n\r\nParticipants: | Last updated ";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Participant List Keep track of partic' pane contains 'Participant List
        ///
        ///Keep track of participant data that has been added to this project.
        ///
        ///Participants: | Last updated '
        /// </summary>
        public string UIParticipantListKeeptPaneDisplayText = "Participant List\r\n\r\nKeep track of participant data that has been added to this pr" +
            "oject.\r\n\r\nParticipants: | Last updated ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertParticipantsTab_IndProject'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class AssertParticipantsTab_IndProjectExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Wait for 10 seconds for user delay between actions; Verify that the 'InnerText' property of 'Participants' link contains 'Participants'
        /// </summary>
        public string UIParticipantsHyperlinkInnerText = "Participants";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'Participants' link contains 'Hyperlink'
        /// </summary>
        public string UIParticipantsHyperlinkControlType = "Hyperlink";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LogintoQA_ExistingUser'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class LogintoQA_ExistingUserParams
    {
        
        #region Fields
        /// <summary>
        /// Go to web page 'https://eca-kmt-qa.azurewebsites.net/' using new browser instance
        /// </summary>
        public string UINewtabInternetExplorWindowUrl = "https://eca-kmt-qa.azurewebsites.net/";
        
        /// <summary>
        /// Type '********' in 'Password' text box
        /// </summary>
        public string UIPasswordEditPassword = "pnl8gvcmh7n9Hp5j+06Q16vTeHomf4bql8vy/6wcjU0=";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectParticipantsTab_IndProject'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class SelectParticipantsTab_IndProjectParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{F5}' in 'Participants' link
        /// </summary>
        public string UIParticipantsHyperlinkSendKeys = "{F5}";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UINewtabInternetExplorWindow : BrowserWindow
    {
        
        public UINewtabInternetExplorWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "New tab";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("New tab");
            this.WindowTitles.Add("Sign in to ECA Client");
            this.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
            #endregion
        }

        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
    
        #region Properties
        public UISignintoECAClientDocument UISignintoECAClientDocument
        {
            get
            {
                if ((this.mUISignintoECAClientDocument == null))
                {
                    this.mUISignintoECAClientDocument = new UISignintoECAClientDocument(this);
                }
                return this.mUISignintoECAClientDocument;
            }
        }
        
        public UIHttpsecakmtqaazureweDocument UIHttpsecakmtqaazureweDocument
        {
            get
            {
                if ((this.mUIHttpsecakmtqaazureweDocument == null))
                {
                    this.mUIHttpsecakmtqaazureweDocument = new UIHttpsecakmtqaazureweDocument(this);
                }
                return this.mUIHttpsecakmtqaazureweDocument;
            }
        }
        
        public UIHttpsecakmtqaazureweDocument1 UIHttpsecakmtqaazureweDocument1
        {
            get
            {
                if ((this.mUIHttpsecakmtqaazureweDocument1 == null))
                {
                    this.mUIHttpsecakmtqaazureweDocument1 = new UIHttpsecakmtqaazureweDocument1(this);
                }
                return this.mUIHttpsecakmtqaazureweDocument1;
            }
        }
        
        public UIHttpsecakmtqaazureweDocument2 UIHttpsecakmtqaazureweDocument2
        {
            get
            {
                if ((this.mUIHttpsecakmtqaazureweDocument2 == null))
                {
                    this.mUIHttpsecakmtqaazureweDocument2 = new UIHttpsecakmtqaazureweDocument2(this);
                }
                return this.mUIHttpsecakmtqaazureweDocument2;
            }
        }
        
        public UIHttpsecakmtqaazureweDocument11 UIHttpsecakmtqaazureweDocument11
        {
            get
            {
                if ((this.mUIHttpsecakmtqaazureweDocument11 == null))
                {
                    this.mUIHttpsecakmtqaazureweDocument11 = new UIHttpsecakmtqaazureweDocument11(this);
                }
                return this.mUIHttpsecakmtqaazureweDocument11;
            }
        }
        
        public UIHttpsecakmtqaazureweDocument3 UIHttpsecakmtqaazureweDocument3
        {
            get
            {
                if ((this.mUIHttpsecakmtqaazureweDocument3 == null))
                {
                    this.mUIHttpsecakmtqaazureweDocument3 = new UIHttpsecakmtqaazureweDocument3(this);
                }
                return this.mUIHttpsecakmtqaazureweDocument3;
            }
        }
        
        public UIHttpsecakmtqaazureweDocument4 UIHttpsecakmtqaazureweDocument4
        {
            get
            {
                if ((this.mUIHttpsecakmtqaazureweDocument4 == null))
                {
                    this.mUIHttpsecakmtqaazureweDocument4 = new UIHttpsecakmtqaazureweDocument4(this);
                }
                return this.mUIHttpsecakmtqaazureweDocument4;
            }
        }
        
        public UIHttpsecakmtqaazureweDocument5 UIHttpsecakmtqaazureweDocument5
        {
            get
            {
                if ((this.mUIHttpsecakmtqaazureweDocument5 == null))
                {
                    this.mUIHttpsecakmtqaazureweDocument5 = new UIHttpsecakmtqaazureweDocument5(this);
                }
                return this.mUIHttpsecakmtqaazureweDocument5;
            }
        }
        #endregion
        
        #region Fields
        private UISignintoECAClientDocument mUISignintoECAClientDocument;
        
        private UIHttpsecakmtqaazureweDocument mUIHttpsecakmtqaazureweDocument;
        
        private UIHttpsecakmtqaazureweDocument1 mUIHttpsecakmtqaazureweDocument1;
        
        private UIHttpsecakmtqaazureweDocument2 mUIHttpsecakmtqaazureweDocument2;
        
        private UIHttpsecakmtqaazureweDocument11 mUIHttpsecakmtqaazureweDocument11;
        
        private UIHttpsecakmtqaazureweDocument3 mUIHttpsecakmtqaazureweDocument3;
        
        private UIHttpsecakmtqaazureweDocument4 mUIHttpsecakmtqaazureweDocument4;
        
        private UIHttpsecakmtqaazureweDocument5 mUIHttpsecakmtqaazureweDocument5;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UISignintoECAClientDocument : HtmlDocument
    {
        
        public UISignintoECAClientDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Sign in to ECA Client";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/statedept.us/oauth2/authorize";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = @"https://login.microsoftonline.com/statedept.us/oauth2/authorize?response_type=id_token&client_id=e0356e55-e124-452c-837d-aeb7504185ff&redirect_uri=https%3A%2F%2Feca-kmt-qa.azurewebsites.net%2F&state=bc95a8ff-87b4-442e-9350-b39595f2a7b3&x-client-SKU=Js&x-client-Ver=1.0.0&nonce=1a0a4dcc-5882-4ed1-a249-6570c23778c9";
            this.WindowTitles.Add("Sign in to ECA Client");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIECATest1statedeptusHyperlink
        {
            get
            {
                if ((this.mUIECATest1statedeptusHyperlink == null))
                {
                    this.mUIECATest1statedeptusHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIECATest1statedeptusHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "ecatest1_statedept_us_link";
                    this.mUIECATest1statedeptusHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIECATest1statedeptusHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIECATest1statedeptusHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "\r\nECATest1@statedept.us\r\n\r\n\r\n\r\n•••";
                    this.mUIECATest1statedeptusHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = null;
                    this.mUIECATest1statedeptusHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIECATest1statedeptusHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "#";
                    this.mUIECATest1statedeptusHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "tile_link tooltip";
                    this.mUIECATest1statedeptusHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "tabindex=\"1\" class=\"tile_link tooltip\" i";
                    this.mUIECATest1statedeptusHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "3";
                    this.mUIECATest1statedeptusHyperlink.WindowTitles.Add("Sign in to ECA Client");
                    #endregion
                }
                return this.mUIECATest1statedeptusHyperlink;
            }
        }
        
        public HtmlEdit UIPasswordEdit
        {
            get
            {
                if ((this.mUIPasswordEdit == null))
                {
                    this.mUIPasswordEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "cred_password_inputtext";
                    this.mUIPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "passwd";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Password";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "PASSWORD";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "login_textfield textfield required field normaltext";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"passwd\" tabindex=\"2\" class=\"login_";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "2";
                    this.mUIPasswordEdit.WindowTitles.Add("Sign in to ECA Client");
                    #endregion
                }
                return this.mUIPasswordEdit;
            }
        }
        
        public HtmlSpan UISigninPane
        {
            get
            {
                if ((this.mUISigninPane == null))
                {
                    this.mUISigninPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUISigninPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "cred_sign_in_button";
                    this.mUISigninPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUISigninPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Sign in";
                    this.mUISigninPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUISigninPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "button normaltext cred_sign_in_button refresh_domain_state control-button button-" +
                        "two button_primary";
                    this.mUISigninPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "tabindex=\"11\" class=\"button normaltext cred_sign_in_button refresh_domain_state c" +
                        "ontrol-button button-two button_primary\" id=\"cred_sign_in_button\" role=\"button\" " +
                        "style=\"opacity: 1;\"";
                    this.mUISigninPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "11";
                    this.mUISigninPane.WindowTitles.Add("Sign in to ECA Client");
                    #endregion
                }
                return this.mUISigninPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIECATest1statedeptusHyperlink;
        
        private HtmlEdit mUIPasswordEdit;
        
        private HtmlSpan mUISigninPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIHttpsecakmtqaazureweDocument : HtmlDocument
    {
        
        public UIHttpsecakmtqaazureweDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://eca-kmt-qa.azurewebsites.net/#/#top";
            this.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
            #endregion
        }
        
        #region Properties
        public HtmlButton UITogglenavigationButton
        {
            get
            {
                if ((this.mUITogglenavigationButton == null))
                {
                    this.mUITogglenavigationButton = new HtmlButton(this);
                    #region Search Criteria
                    this.mUITogglenavigationButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUITogglenavigationButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUITogglenavigationButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Toggle navigation ";
                    this.mUITogglenavigationButton.SearchProperties[HtmlButton.PropertyNames.Type] = "button";
                    this.mUITogglenavigationButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUITogglenavigationButton.FilterProperties[HtmlButton.PropertyNames.Class] = "navbar-toggle collapsed";
                    this.mUITogglenavigationButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"navbar-toggle collapsed\" type=\"bu";
                    this.mUITogglenavigationButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "1";
                    this.mUITogglenavigationButton.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
                    #endregion
                }
                return this.mUITogglenavigationButton;
            }
        }
        
        public UICbpspmenus1Custom UICbpspmenus1Custom
        {
            get
            {
                if ((this.mUICbpspmenus1Custom == null))
                {
                    this.mUICbpspmenus1Custom = new UICbpspmenus1Custom(this);
                }
                return this.mUICbpspmenus1Custom;
            }
        }
        
        public HtmlSpan UIItemPane
        {
            get
            {
                if ((this.mUIItemPane == null))
                {
                    this.mUIItemPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIItemPane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIItemPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = null;
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "icon-bar";
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"icon-bar\"";
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "5";
                    this.mUIItemPane.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
                    #endregion
                }
                return this.mUIItemPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlButton mUITogglenavigationButton;
        
        private UICbpspmenus1Custom mUICbpspmenus1Custom;
        
        private HtmlSpan mUIItemPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UICbpspmenus1Custom : HtmlCustom
    {
        
        public UICbpspmenus1Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties["TagName"] = "NAV";
            this.SearchProperties["Id"] = "cbp-spmenu-s1";
            this.SearchProperties[UITestControl.PropertyNames.Name] = null;
            this.FilterProperties["Class"] = "cbp-spmenu cbp-spmenu-vertical cbp-spmenu-left cbp-spmenu-open";
            this.FilterProperties["ControlDefinition"] = "class=\"cbp-spmenu cbp-spmenu-vertical cb";
            this.FilterProperties["TagInstance"] = "1";
            this.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIProgramsHyperlink
        {
            get
            {
                if ((this.mUIProgramsHyperlink == null))
                {
                    this.mUIProgramsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIProgramsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIProgramsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIProgramsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIProgramsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Programs";
                    this.mUIProgramsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = null;
                    this.mUIProgramsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIProgramsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "#/allprograms";
                    this.mUIProgramsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "ng-binding ng-scope";
                    this.mUIProgramsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"ng-binding ng-scope\" href=\"#/allp";
                    this.mUIProgramsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "3";
                    this.mUIProgramsHyperlink.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
                    #endregion
                }
                return this.mUIProgramsHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIProgramsHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIHttpsecakmtqaazureweDocument1 : HtmlDocument
    {
        
        public UIHttpsecakmtqaazureweDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://eca-kmt-qa.azurewebsites.net/#/allprograms#top";
            this.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
            #endregion
        }
        
        #region Properties
        public UISortlistPane UISortlistPane
        {
            get
            {
                if ((this.mUISortlistPane == null))
                {
                    this.mUISortlistPane = new UISortlistPane(this);
                }
                return this.mUISortlistPane;
            }
        }
        #endregion
        
        #region Fields
        private UISortlistPane mUISortlistPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UISortlistPane : HtmlDiv
    {
        
        public UISortlistPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "sort-list";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Showing 1 - 25 of 190 programs\r\n\r\n \r\n\r\n\r";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = "ng-isolate-scope";
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"ng-isolate-scope\" id=\"sort-list\" st-table=\"programs\" st-pipe=\"getPrograms\"" +
                "";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "42";
            this.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIAcademicExchangeProgHyperlink
        {
            get
            {
                if ((this.mUIAcademicExchangeProgHyperlink == null))
                {
                    this.mUIAcademicExchangeProgHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIAcademicExchangeProgHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIAcademicExchangeProgHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIAcademicExchangeProgHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIAcademicExchangeProgHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Academic Exchange Programs";
                    this.mUIAcademicExchangeProgHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = null;
                    this.mUIAcademicExchangeProgHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIAcademicExchangeProgHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "#/programs/47/overview";
                    this.mUIAcademicExchangeProgHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "ng-binding";
                    this.mUIAcademicExchangeProgHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"ng-binding\" href=\"#/programs/47/o";
                    this.mUIAcademicExchangeProgHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "1";
                    this.mUIAcademicExchangeProgHyperlink.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
                    #endregion
                }
                return this.mUIAcademicExchangeProgHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIAcademicExchangeProgHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIHttpsecakmtqaazureweDocument2 : HtmlDocument
    {
        
        public UIHttpsecakmtqaazureweDocument2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://eca-kmt-qa.azurewebsites.net/#/programs/47/overview#top";
            this.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
            #endregion
        }
        
        #region Properties
        public UITopPane UITopPane
        {
            get
            {
                if ((this.mUITopPane == null))
                {
                    this.mUITopPane = new UITopPane(this);
                }
                return this.mUITopPane;
            }
        }
        #endregion
        
        #region Fields
        private UITopPane mUITopPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UITopPane : HtmlDiv
    {
        
        public UITopPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "top";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Office of Academic Exchange Programs • A";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = "ng-scope";
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"ng-scope\" id=\"top\" autoscroll=\"true\" ui-view=\"\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "37";
            this.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIBranchesProjectsHyperlink
        {
            get
            {
                if ((this.mUIBranchesProjectsHyperlink == null))
                {
                    this.mUIBranchesProjectsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIBranchesProjectsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIBranchesProjectsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIBranchesProjectsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIBranchesProjectsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Branches & Projects";
                    this.mUIBranchesProjectsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = null;
                    this.mUIBranchesProjectsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIBranchesProjectsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "#/programs/47/projects";
                    this.mUIBranchesProjectsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "ng-binding";
                    this.mUIBranchesProjectsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"ng-binding\" href=\"#/programs/47/p";
                    this.mUIBranchesProjectsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "3";
                    this.mUIBranchesProjectsHyperlink.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
                    #endregion
                }
                return this.mUIBranchesProjectsHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIBranchesProjectsHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIHttpsecakmtqaazureweDocument11 : HtmlDocument
    {
        
        public UIHttpsecakmtqaazureweDocument11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://eca-kmt-qa.azurewebsites.net/";
            this.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
            #endregion
        }
        
        #region Properties
        public UITopPane1 UITopPane
        {
            get
            {
                if ((this.mUITopPane == null))
                {
                    this.mUITopPane = new UITopPane1(this);
                }
                return this.mUITopPane;
            }
        }
        
        public UIParticipantFormCustom UIParticipantFormCustom
        {
            get
            {
                if ((this.mUIParticipantFormCustom == null))
                {
                    this.mUIParticipantFormCustom = new UIParticipantFormCustom(this);
                }
                return this.mUIParticipantFormCustom;
            }
        }
        #endregion
        
        #region Fields
        private UITopPane1 mUITopPane;
        
        private UIParticipantFormCustom mUIParticipantFormCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UITopPane1 : HtmlDiv
    {
        
        public UITopPane1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "top";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Office of Academic Exchange Programs • A";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = "ng-scope";
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"ng-scope\" id=\"top\" autoscroll=\"true\" ui-view=\"\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "37";
            this.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIBranchesProjectsHyperlink
        {
            get
            {
                if ((this.mUIBranchesProjectsHyperlink == null))
                {
                    this.mUIBranchesProjectsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIBranchesProjectsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIBranchesProjectsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIBranchesProjectsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIBranchesProjectsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Branches & Projects";
                    this.mUIBranchesProjectsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = null;
                    this.mUIBranchesProjectsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIBranchesProjectsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "#/programs/47/projects";
                    this.mUIBranchesProjectsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "ng-binding";
                    this.mUIBranchesProjectsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"ng-binding\" href=\"#/programs/47/p";
                    this.mUIBranchesProjectsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "3";
                    this.mUIBranchesProjectsHyperlink.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
                    #endregion
                }
                return this.mUIBranchesProjectsHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIBranchesProjectsHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIParticipantFormCustom : HtmlCustom
    {
        
        public UIParticipantFormCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties["TagName"] = "FORM";
            this.SearchProperties["Id"] = null;
            this.SearchProperties[UITestControl.PropertyNames.Name] = "participantForm";
            this.FilterProperties["Class"] = "ng-pristine ng-invalid ng-invalid-required ng-valid-max";
            this.FilterProperties["ControlDefinition"] = "name=\"participantForm\" class=\"ng-pristin";
            this.FilterProperties["TagInstance"] = "1";
            this.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
            #endregion
        }
        
        #region Properties
        public HtmlDiv UIFIRSTGIVENNAMEssspGEPane
        {
            get
            {
                if ((this.mUIFIRSTGIVENNAMEssspGEPane == null))
                {
                    this.mUIFIRSTGIVENNAMEssspGEPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIFIRSTGIVENNAMEssspGEPane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIFIRSTGIVENNAMEssspGEPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIFIRSTGIVENNAMEssspGEPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "FIRST / GIVEN NAMEss *sp\r\n\r\n\r\nGENDER *\r\n";
                    this.mUIFIRSTGIVENNAMEssspGEPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIFIRSTGIVENNAMEssspGEPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "row";
                    this.mUIFIRSTGIVENNAMEssspGEPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"row\"";
                    this.mUIFIRSTGIVENNAMEssspGEPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "106";
                    this.mUIFIRSTGIVENNAMEssspGEPane.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
                    #endregion
                }
                return this.mUIFIRSTGIVENNAMEssspGEPane;
            }
        }
        
        public HtmlDiv UIFIRSTGIVENNAMEssspPane
        {
            get
            {
                if ((this.mUIFIRSTGIVENNAMEssspPane == null))
                {
                    this.mUIFIRSTGIVENNAMEssspPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIFIRSTGIVENNAMEssspPane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIFIRSTGIVENNAMEssspPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIFIRSTGIVENNAMEssspPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "FIRST / GIVEN NAMEss *sp";
                    this.mUIFIRSTGIVENNAMEssspPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIFIRSTGIVENNAMEssspPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "form-group";
                    this.mUIFIRSTGIVENNAMEssspPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"form-group\"";
                    this.mUIFIRSTGIVENNAMEssspPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "108";
                    this.mUIFIRSTGIVENNAMEssspPane.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
                    #endregion
                }
                return this.mUIFIRSTGIVENNAMEssspPane;
            }
        }
        
        public HtmlEdit UIItemEditFIRSTGIVENName
        {
            get
            {
                if ((this.mUIItemEditFIRSTGIVENName == null))
                {
                    this.mUIItemEditFIRSTGIVENName = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIItemEditFIRSTGIVENName.SearchProperties[HtmlEdit.PropertyNames.Id] = null;
                    this.mUIItemEditFIRSTGIVENName.SearchProperties[HtmlEdit.PropertyNames.Name] = null;
                    this.mUIItemEditFIRSTGIVENName.SearchProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUIItemEditFIRSTGIVENName.SearchProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIItemEditFIRSTGIVENName.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIItemEditFIRSTGIVENName.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control ng-pristine ng-untouched ng-invalid ng-invalid-required";
                    this.mUIItemEditFIRSTGIVENName.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "class=\"form-control ng-pristine ng-untou";
                    this.mUIItemEditFIRSTGIVENName.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "1";
                    this.mUIItemEditFIRSTGIVENName.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
                    #endregion
                }
                return this.mUIItemEditFIRSTGIVENName;
            }
        }
        
        public HtmlDiv UISURNAMEPRIMARYNAMEPane
        {
            get
            {
                if ((this.mUISURNAMEPRIMARYNAMEPane == null))
                {
                    this.mUISURNAMEPRIMARYNAMEPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUISURNAMEPRIMARYNAMEPane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUISURNAMEPRIMARYNAMEPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUISURNAMEPRIMARYNAMEPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "SURNAME / PRIMARY NAME *";
                    this.mUISURNAMEPRIMARYNAMEPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUISURNAMEPRIMARYNAMEPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "form-group";
                    this.mUISURNAMEPRIMARYNAMEPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"form-group\"";
                    this.mUISURNAMEPRIMARYNAMEPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1136";
                    this.mUISURNAMEPRIMARYNAMEPane.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
                    #endregion
                }
                return this.mUISURNAMEPRIMARYNAMEPane;
            }
        }
        
        public HtmlEdit UIItemEditSURNAME
        {
            get
            {
                if ((this.mUIItemEditSURNAME == null))
                {
                    this.mUIItemEditSURNAME = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIItemEditSURNAME.SearchProperties[HtmlEdit.PropertyNames.Id] = null;
                    this.mUIItemEditSURNAME.SearchProperties[HtmlEdit.PropertyNames.Name] = null;
                    this.mUIItemEditSURNAME.SearchProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUIItemEditSURNAME.SearchProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIItemEditSURNAME.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIItemEditSURNAME.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control ng-pristine ng-untouched ng-invalid ng-invalid-required";
                    this.mUIItemEditSURNAME.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "class=\"form-control ng-pristine ng-untou";
                    this.mUIItemEditSURNAME.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "512";
                    this.mUIItemEditSURNAME.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
                    #endregion
                }
                return this.mUIItemEditSURNAME;
            }
        }
        
        public HtmlDiv UIGENDERNoneSelectedRePane
        {
            get
            {
                if ((this.mUIGENDERNoneSelectedRePane == null))
                {
                    this.mUIGENDERNoneSelectedRePane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIGENDERNoneSelectedRePane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIGENDERNoneSelectedRePane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIGENDERNoneSelectedRePane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "GENDER *\r\nNone Selected\r\n\r\n\r\n↶  Reset\r\n\r";
                    this.mUIGENDERNoneSelectedRePane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIGENDERNoneSelectedRePane.FilterProperties[HtmlDiv.PropertyNames.Class] = "form-group";
                    this.mUIGENDERNoneSelectedRePane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"form-group\"";
                    this.mUIGENDERNoneSelectedRePane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "109";
                    this.mUIGENDERNoneSelectedRePane.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
                    #endregion
                }
                return this.mUIGENDERNoneSelectedRePane;
            }
        }
        
        public HtmlButton UINoneSelectedButtonGENDER
        {
            get
            {
                if ((this.mUINoneSelectedButtonGENDER == null))
                {
                    this.mUINoneSelectedButtonGENDER = new HtmlButton(this);
                    #region Search Criteria
                    this.mUINoneSelectedButtonGENDER.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUINoneSelectedButtonGENDER.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUINoneSelectedButtonGENDER.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "None Selected";
                    this.mUINoneSelectedButtonGENDER.SearchProperties[HtmlButton.PropertyNames.Type] = "button";
                    this.mUINoneSelectedButtonGENDER.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUINoneSelectedButtonGENDER.FilterProperties[HtmlButton.PropertyNames.Class] = "ng-binding";
                    this.mUINoneSelectedButtonGENDER.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"ng-binding\" type=\"button\" ng-clic";
                    this.mUINoneSelectedButtonGENDER.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "1";
                    this.mUINoneSelectedButtonGENDER.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
                    #endregion
                }
                return this.mUINoneSelectedButtonGENDER;
            }
        }
        
        public HtmlDiv UIDATEOFBIRTHPane
        {
            get
            {
                if ((this.mUIDATEOFBIRTHPane == null))
                {
                    this.mUIDATEOFBIRTHPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIDATEOFBIRTHPane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIDATEOFBIRTHPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIDATEOFBIRTHPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "DATE OF BIRTH *";
                    this.mUIDATEOFBIRTHPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIDATEOFBIRTHPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "form-group";
                    this.mUIDATEOFBIRTHPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"form-group\"";
                    this.mUIDATEOFBIRTHPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1137";
                    this.mUIDATEOFBIRTHPane.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
                    #endregion
                }
                return this.mUIDATEOFBIRTHPane;
            }
        }
        
        public HtmlEdit UIItemEditDOB
        {
            get
            {
                if ((this.mUIItemEditDOB == null))
                {
                    this.mUIItemEditDOB = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIItemEditDOB.SearchProperties[HtmlEdit.PropertyNames.Id] = null;
                    this.mUIItemEditDOB.SearchProperties[HtmlEdit.PropertyNames.Name] = null;
                    this.mUIItemEditDOB.SearchProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUIItemEditDOB.SearchProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIItemEditDOB.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIItemEditDOB.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control ng-pristine ng-untouched ng-valid-max ng-invalid ng-invalid-required" +
                        "";
                    this.mUIItemEditDOB.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "class=\"form-control ng-pristine ng-untou";
                    this.mUIItemEditDOB.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "513";
                    this.mUIItemEditDOB.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
                    #endregion
                }
                return this.mUIItemEditDOB;
            }
        }
        
        public HtmlDiv UIPLACEOFBIRTHCOUNTRYNPane
        {
            get
            {
                if ((this.mUIPLACEOFBIRTHCOUNTRYNPane == null))
                {
                    this.mUIPLACEOFBIRTHCOUNTRYNPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIPLACEOFBIRTHCOUNTRYNPane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIPLACEOFBIRTHCOUNTRYNPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIPLACEOFBIRTHCOUNTRYNPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "PLACE OF BIRTH - COUNTRY *\r\nNone Selecte";
                    this.mUIPLACEOFBIRTHCOUNTRYNPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIPLACEOFBIRTHCOUNTRYNPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "form-group";
                    this.mUIPLACEOFBIRTHCOUNTRYNPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"form-group\"";
                    this.mUIPLACEOFBIRTHCOUNTRYNPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "123";
                    this.mUIPLACEOFBIRTHCOUNTRYNPane.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
                    #endregion
                }
                return this.mUIPLACEOFBIRTHCOUNTRYNPane;
            }
        }
        
        public HtmlButton UINoneSelectedButtonPOB
        {
            get
            {
                if ((this.mUINoneSelectedButtonPOB == null))
                {
                    this.mUINoneSelectedButtonPOB = new HtmlButton(this);
                    #region Search Criteria
                    this.mUINoneSelectedButtonPOB.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUINoneSelectedButtonPOB.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUINoneSelectedButtonPOB.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "None Selected";
                    this.mUINoneSelectedButtonPOB.SearchProperties[HtmlButton.PropertyNames.Type] = "button";
                    this.mUINoneSelectedButtonPOB.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUINoneSelectedButtonPOB.FilterProperties[HtmlButton.PropertyNames.Class] = "ng-binding";
                    this.mUINoneSelectedButtonPOB.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"ng-binding\" type=\"button\" ng-clic";
                    this.mUINoneSelectedButtonPOB.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "4";
                    this.mUINoneSelectedButtonPOB.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
                    #endregion
                }
                return this.mUINoneSelectedButtonPOB;
            }
        }
        
        public HtmlDiv UIPLACEOFBIRTHCITYNonePane
        {
            get
            {
                if ((this.mUIPLACEOFBIRTHCITYNonePane == null))
                {
                    this.mUIPLACEOFBIRTHCITYNonePane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIPLACEOFBIRTHCITYNonePane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIPLACEOFBIRTHCITYNonePane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIPLACEOFBIRTHCITYNonePane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "PLACE OF BIRTH - CITY *\r\nNone Selected\r\n";
                    this.mUIPLACEOFBIRTHCITYNonePane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIPLACEOFBIRTHCITYNonePane.FilterProperties[HtmlDiv.PropertyNames.Class] = "form-group";
                    this.mUIPLACEOFBIRTHCITYNonePane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"form-group\"";
                    this.mUIPLACEOFBIRTHCITYNonePane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1138";
                    this.mUIPLACEOFBIRTHCITYNonePane.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
                    #endregion
                }
                return this.mUIPLACEOFBIRTHCITYNonePane;
            }
        }
        
        public HtmlButton UINoneSelectedButtonPOBCity
        {
            get
            {
                if ((this.mUINoneSelectedButtonPOBCity == null))
                {
                    this.mUINoneSelectedButtonPOBCity = new HtmlButton(this);
                    #region Search Criteria
                    this.mUINoneSelectedButtonPOBCity.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUINoneSelectedButtonPOBCity.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUINoneSelectedButtonPOBCity.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "None Selected";
                    this.mUINoneSelectedButtonPOBCity.SearchProperties[HtmlButton.PropertyNames.Type] = "button";
                    this.mUINoneSelectedButtonPOBCity.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUINoneSelectedButtonPOBCity.FilterProperties[HtmlButton.PropertyNames.Class] = "ng-binding";
                    this.mUINoneSelectedButtonPOBCity.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"ng-binding\" type=\"button\" ng-clic";
                    this.mUINoneSelectedButtonPOBCity.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "12";
                    this.mUINoneSelectedButtonPOBCity.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
                    #endregion
                }
                return this.mUINoneSelectedButtonPOBCity;
            }
        }
        
        public HtmlDiv UICOUNTRIESOFCITIZENSHPane
        {
            get
            {
                if ((this.mUICOUNTRIESOFCITIZENSHPane == null))
                {
                    this.mUICOUNTRIESOFCITIZENSHPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUICOUNTRIESOFCITIZENSHPane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUICOUNTRIESOFCITIZENSHPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUICOUNTRIESOFCITIZENSHPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "COUNTRIES OF CITIZENSHIP *\r\nNone Selecte";
                    this.mUICOUNTRIESOFCITIZENSHPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUICOUNTRIESOFCITIZENSHPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "form-group";
                    this.mUICOUNTRIESOFCITIZENSHPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"form-group\"";
                    this.mUICOUNTRIESOFCITIZENSHPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "629";
                    this.mUICOUNTRIESOFCITIZENSHPane.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
                    #endregion
                }
                return this.mUICOUNTRIESOFCITIZENSHPane;
            }
        }
        
        public HtmlButton UINoneSelectedButtonCOCit
        {
            get
            {
                if ((this.mUINoneSelectedButtonCOCit == null))
                {
                    this.mUINoneSelectedButtonCOCit = new HtmlButton(this);
                    #region Search Criteria
                    this.mUINoneSelectedButtonCOCit.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUINoneSelectedButtonCOCit.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUINoneSelectedButtonCOCit.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "None Selected";
                    this.mUINoneSelectedButtonCOCit.SearchProperties[HtmlButton.PropertyNames.Type] = "button";
                    this.mUINoneSelectedButtonCOCit.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUINoneSelectedButtonCOCit.FilterProperties[HtmlButton.PropertyNames.Class] = "ng-binding";
                    this.mUINoneSelectedButtonCOCit.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"ng-binding\" type=\"button\" ng-clic";
                    this.mUINoneSelectedButtonCOCit.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "7";
                    this.mUINoneSelectedButtonCOCit.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
                    #endregion
                }
                return this.mUINoneSelectedButtonCOCit;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUIFIRSTGIVENNAMEssspGEPane;
        
        private HtmlDiv mUIFIRSTGIVENNAMEssspPane;
        
        private HtmlEdit mUIItemEditFIRSTGIVENName;
        
        private HtmlDiv mUISURNAMEPRIMARYNAMEPane;
        
        private HtmlEdit mUIItemEditSURNAME;
        
        private HtmlDiv mUIGENDERNoneSelectedRePane;
        
        private HtmlButton mUINoneSelectedButtonGENDER;
        
        private HtmlDiv mUIDATEOFBIRTHPane;
        
        private HtmlEdit mUIItemEditDOB;
        
        private HtmlDiv mUIPLACEOFBIRTHCOUNTRYNPane;
        
        private HtmlButton mUINoneSelectedButtonPOB;
        
        private HtmlDiv mUIPLACEOFBIRTHCITYNonePane;
        
        private HtmlButton mUINoneSelectedButtonPOBCity;
        
        private HtmlDiv mUICOUNTRIESOFCITIZENSHPane;
        
        private HtmlButton mUINoneSelectedButtonCOCit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIHttpsecakmtqaazureweDocument3 : HtmlDocument
    {
        
        public UIHttpsecakmtqaazureweDocument3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://eca-kmt-qa.azurewebsites.net/#/programs/47/projects#top";
            this.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
            #endregion
        }
        
        #region Properties
        public UISortlistPane1 UISortlistPane
        {
            get
            {
                if ((this.mUISortlistPane == null))
                {
                    this.mUISortlistPane = new UISortlistPane1(this);
                }
                return this.mUISortlistPane;
            }
        }
        #endregion
        
        #region Fields
        private UISortlistPane1 mUISortlistPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UISortlistPane1 : HtmlDiv
    {
        
        public UISortlistPane1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "sort-list";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Title\r\n\r\nStatus\r\n\r\nYear\r\n\r\nRegion\r\n\r\n \r\n";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = "ng-scope ng-isolate-scope";
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"ng-scope ng-isolate-scope\" id=\"sort-list\" st-table=\"projects\" st-pipe=\"get" +
                "Projects\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "57";
            this.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UITestProject1Hyperlink
        {
            get
            {
                if ((this.mUITestProject1Hyperlink == null))
                {
                    this.mUITestProject1Hyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUITestProject1Hyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUITestProject1Hyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUITestProject1Hyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUITestProject1Hyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Test Project 1";
                    this.mUITestProject1Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = null;
                    this.mUITestProject1Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUITestProject1Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "#/offices/1414/programs/47/project/1364/overview";
                    this.mUITestProject1Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "ng-binding";
                    this.mUITestProject1Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"ng-binding\" href=\"#/offices/1414/";
                    this.mUITestProject1Hyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "13";
                    this.mUITestProject1Hyperlink.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
                    #endregion
                }
                return this.mUITestProject1Hyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUITestProject1Hyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIHttpsecakmtqaazureweDocument4 : HtmlDocument
    {
        
        public UIHttpsecakmtqaazureweDocument4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://eca-kmt-qa.azurewebsites.net/#/offices/1414/programs/47/project/1364/over" +
                "view#top";
            this.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
            #endregion
        }
        
        #region Properties
        public UITopPane2 UITopPane
        {
            get
            {
                if ((this.mUITopPane == null))
                {
                    this.mUITopPane = new UITopPane2(this);
                }
                return this.mUITopPane;
            }
        }
        
        public UITopPane11 UITopPane1
        {
            get
            {
                if ((this.mUITopPane1 == null))
                {
                    this.mUITopPane1 = new UITopPane11(this);
                }
                return this.mUITopPane1;
            }
        }
        #endregion
        
        #region Fields
        private UITopPane2 mUITopPane;
        
        private UITopPane11 mUITopPane1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UITopPane2 : HtmlDiv
    {
        
        public UITopPane2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "top";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Office of Academic Exchange Programs • A";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = "ng-scope";
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"ng-scope\" id=\"top\" autoscroll=\"true\" ui-view=\"\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "37";
            this.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIParticipantsHyperlink
        {
            get
            {
                if ((this.mUIParticipantsHyperlink == null))
                {
                    this.mUIParticipantsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIParticipantsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIParticipantsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIParticipantsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIParticipantsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Participants";
                    this.mUIParticipantsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = null;
                    this.mUIParticipantsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIParticipantsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "#/offices/1414/programs/47/project/1364/participant";
                    this.mUIParticipantsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "ng-binding";
                    this.mUIParticipantsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"ng-binding\" href=\"#/offices/1414/";
                    this.mUIParticipantsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "7";
                    this.mUIParticipantsHyperlink.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
                    #endregion
                }
                return this.mUIParticipantsHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIParticipantsHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UITopPane11 : HtmlDiv
    {
        
        public UITopPane11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "top";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Office of Academic Exchange Programs • A";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = "ng-scope";
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"ng-scope\" id=\"top\" autoscroll=\"true\" ui-view=\"\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "39";
            this.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIParticipantsHyperlink
        {
            get
            {
                if ((this.mUIParticipantsHyperlink == null))
                {
                    this.mUIParticipantsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIParticipantsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIParticipantsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIParticipantsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIParticipantsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Participants";
                    this.mUIParticipantsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = null;
                    this.mUIParticipantsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIParticipantsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "#/offices/1414/programs/47/project/1364/participant";
                    this.mUIParticipantsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "ng-binding";
                    this.mUIParticipantsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"ng-binding\" href=\"#/offices/1414/";
                    this.mUIParticipantsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "7";
                    this.mUIParticipantsHyperlink.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
                    #endregion
                }
                return this.mUIParticipantsHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIParticipantsHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIHttpsecakmtqaazureweDocument5 : HtmlDocument
    {
        
        public UIHttpsecakmtqaazureweDocument5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://eca-kmt-qa.azurewebsites.net/#/offices/1414/programs/47/project/1364/part" +
                "icipant#top";
            this.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
            #endregion
        }
        
        #region Properties
        public UITopPane3 UITopPane
        {
            get
            {
                if ((this.mUITopPane == null))
                {
                    this.mUITopPane = new UITopPane3(this);
                }
                return this.mUITopPane;
            }
        }
        
        public UIADDPane UIADDPane
        {
            get
            {
                if ((this.mUIADDPane == null))
                {
                    this.mUIADDPane = new UIADDPane(this);
                }
                return this.mUIADDPane;
            }
        }
        #endregion
        
        #region Fields
        private UITopPane3 mUITopPane;
        
        private UIADDPane mUIADDPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UITopPane3 : HtmlDiv
    {
        
        public UITopPane3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "top";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Office of Academic Exchange Programs • A";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = "ng-scope";
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"ng-scope\" id=\"top\" autoscroll=\"true\" ui-view=\"\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "37";
            this.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
            #endregion
        }
        
        #region Properties
        public HtmlDiv UIParticipantListKeeptPane
        {
            get
            {
                if ((this.mUIParticipantListKeeptPane == null))
                {
                    this.mUIParticipantListKeeptPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIParticipantListKeeptPane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIParticipantListKeeptPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIParticipantListKeeptPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Participant List\r\n\r\nKeep track of partic";
                    this.mUIParticipantListKeeptPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIParticipantListKeeptPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "col-md-10";
                    this.mUIParticipantListKeeptPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"col-md-10\"";
                    this.mUIParticipantListKeeptPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "85";
                    this.mUIParticipantListKeeptPane.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
                    #endregion
                }
                return this.mUIParticipantListKeeptPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUIParticipantListKeeptPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIADDPane : HtmlDiv
    {
        
        public UIADDPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "list-views";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "ADD ";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = "col-md-12";
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"col-md-12\" id=\"list-views\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "88";
            this.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
            #endregion
        }
        
        #region Properties
        public HtmlButton UIADDButton
        {
            get
            {
                if ((this.mUIADDButton == null))
                {
                    this.mUIADDButton = new HtmlButton(this);
                    #region Search Criteria
                    this.mUIADDButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUIADDButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUIADDButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "ADD";
                    this.mUIADDButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIADDButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIADDButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-primary right";
                    this.mUIADDButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-primary right\" ng-click=\"";
                    this.mUIADDButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "1";
                    this.mUIADDButton.WindowTitles.Add("https://eca-kmt-qa.azurewebsites.net/");
                    #endregion
                }
                return this.mUIADDButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlButton mUIADDButton;
        #endregion
    }
}
